
Stepper_bientro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080053a8  080053a8  000063a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800543c  0800543c  00007064  2**0
                  CONTENTS
  4 .ARM          00000000  0800543c  0800543c  00007064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800543c  0800543c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0000643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005444  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000064  080054a8  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080054a8  00007434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1bf  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226a  00000000  00000000  0001524c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000174b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000adc  00000000  00000000  00018298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186bd  00000000  00000000  00018d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111b8  00000000  00000000  00031431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8cd  00000000  00000000  000425e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  000d1efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d5e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08005390 	.word	0x08005390

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08005390 	.word	0x08005390

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fce6 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f814 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f94c 	bl	80007b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f920 	bl	8000764 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000524:	f000 f86a 	bl	80005fc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000528:	f000 f8a6 	bl	8000678 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&rx_data, sizeof(rx_data));
 800052c:	2201      	movs	r2, #1
 800052e:	4903      	ldr	r1, [pc, #12]	@ (800053c <main+0x2c>)
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <main+0x30>)
 8000532:	f003 fcda 	bl	8003eea <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x26>
 800053a:	bf00      	nop
 800053c:	20000140 	.word	0x20000140
 8000540:	200000f8 	.word	0x200000f8

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800054e:	2228      	movs	r2, #40	@ 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fa8c 	bl	8004a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000590:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000594:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fe46 	bl	800222c <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a6:	f000 facd 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f8b2 	bl	8002730 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005d2:	f000 fab7 	bl	8000b44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d6:	2302      	movs	r3, #2
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fa32 	bl	8002a4c <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ee:	f000 faa9 	bl	8000b44 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	@ 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_ADC1_Init+0x74>)
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MX_ADC1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ADC1_Init+0x74>)
 800061a:	2201      	movs	r2, #1
 800061c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_ADC1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_ADC1_Init+0x74>)
 8000626:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800062a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ADC1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_ADC1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	480d      	ldr	r0, [pc, #52]	@ (8000670 <MX_ADC1_Init+0x74>)
 800063a:	f000 fcb5 	bl	8000fa8 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 fa7e 	bl	8000b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000648:	2307      	movs	r3, #7
 800064a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_ADC1_Init+0x74>)
 800065a:	f001 f8ef 	bl	800183c <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000664:	f000 fa6e 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000080 	.word	0x20000080
 8000674:	40012400 	.word	0x40012400

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08e      	sub	sp, #56	@ 0x38
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]
 80006a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80006b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006b2:	2247      	movs	r2, #71	@ 0x47
 80006b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006be:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d0:	4823      	ldr	r0, [pc, #140]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006d2:	f002 fb27 	bl	8002d24 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006dc:	f000 fa32 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ea:	4619      	mov	r1, r3
 80006ec:	481c      	ldr	r0, [pc, #112]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006ee:	f002 ff15 	bl	800351c <HAL_TIM_ConfigClockSource>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006f8:	f000 fa24 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006fc:	4818      	ldr	r0, [pc, #96]	@ (8000760 <MX_TIM2_Init+0xe8>)
 80006fe:	f002 fb60 	bl	8002dc2 <HAL_TIM_PWM_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000708:	f000 fa1c 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4619      	mov	r1, r3
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <MX_TIM2_Init+0xe8>)
 800071c:	f003 fa9a 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000726:	f000 fa0d 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	@ 0x60
 800072c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	4807      	ldr	r0, [pc, #28]	@ (8000760 <MX_TIM2_Init+0xe8>)
 8000742:	f002 fe29 	bl	8003398 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800074c:	f000 f9fa 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <MX_TIM2_Init+0xe8>)
 8000752:	f000 fa97 	bl	8000c84 <HAL_TIM_MspPostInit>

}
 8000756:	bf00      	nop
 8000758:	3738      	adds	r7, #56	@ 0x38
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000b0 	.word	0x200000b0

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	@ (80007b4 <MX_USART1_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000770:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART1_UART_Init+0x4c>)
 800079c:	f003 faca 	bl	8003d34 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f9cd 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000f8 	.word	0x200000f8
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_GPIO_Init+0x74>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_GPIO_Init+0x74>)
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_GPIO_Init+0x74>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0320 	and.w	r3, r3, #32
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_GPIO_Init+0x74>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a10      	ldr	r2, [pc, #64]	@ (800082c <MX_GPIO_Init+0x74>)
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_GPIO_Init+0x74>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0304 	and.w	r3, r3, #4
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2106      	movs	r1, #6
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <MX_GPIO_Init+0x78>)
 8000802:	f001 fcfb 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000806:	2306      	movs	r3, #6
 8000808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4619      	mov	r1, r3
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0x78>)
 800081e:	f001 fb69 	bl	8001ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800

08000834 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == huart1.Instance)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_UART_RxCpltCallback+0x44>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	429a      	cmp	r2, r3
 8000846:	d112      	bne.n	800086e <HAL_UART_RxCpltCallback+0x3a>
	  {
		 switch(rx_data){
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_UART_RxCpltCallback+0x48>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b31      	cmp	r3, #49	@ 0x31
 800084e:	d108      	bne.n	8000862 <HAL_UART_RxCpltCallback+0x2e>

		 		case '1':
		 				{

		 					 HAL_ADC_Start_IT(&hadc1);
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <HAL_UART_RxCpltCallback+0x4c>)
 8000852:	f000 fe35 	bl	80014c0 <HAL_ADC_Start_IT>
		 					 HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_ENABLED);
 8000856:	2200      	movs	r2, #0
 8000858:	2104      	movs	r1, #4
 800085a:	480a      	ldr	r0, [pc, #40]	@ (8000884 <HAL_UART_RxCpltCallback+0x50>)
 800085c:	f001 fcce 	bl	80021fc <HAL_GPIO_WritePin>
		 				} break;
 8000860:	e000      	b.n	8000864 <HAL_UART_RxCpltCallback+0x30>


		 		default:
		 		break;
 8000862:	bf00      	nop
		 }

		 HAL_UART_Receive_IT(&huart1, &rx_data, sizeof(rx_data));
 8000864:	2201      	movs	r2, #1
 8000866:	4905      	ldr	r1, [pc, #20]	@ (800087c <HAL_UART_RxCpltCallback+0x48>)
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <HAL_UART_RxCpltCallback+0x44>)
 800086a:	f003 fb3e 	bl	8003eea <HAL_UART_Receive_IT>
	  }

}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000f8 	.word	0x200000f8
 800087c:	20000140 	.word	0x20000140
 8000880:	20000080 	.word	0x20000080
 8000884:	40010800 	.word	0x40010800

08000888 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	1a8a      	subs	r2, r1, r2
 80008a2:	3201      	adds	r2, #1
 80008a4:	fb03 f202 	mul.w	r2, r3, r2
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1acb      	subs	r3, r1, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	4413      	add	r3, r2
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <AverageFiltered>:


uint32_t AverageFiltered(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
   uint32_t sum = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]

   for (int i = 0; i < ADC_SAMPLES; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	e019      	b.n	8000908 <AverageFiltered+0x44>

       HAL_ADC_Start(&hadc1);
 80008d4:	4812      	ldr	r0, [pc, #72]	@ (8000920 <AverageFiltered+0x5c>)
 80008d6:	f000 fc3f 	bl	8001158 <HAL_ADC_Start>
       HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008da:	f04f 31ff 	mov.w	r1, #4294967295
 80008de:	4810      	ldr	r0, [pc, #64]	@ (8000920 <AverageFiltered+0x5c>)
 80008e0:	f000 fce8 	bl	80012b4 <HAL_ADC_PollForConversion>
       adcValues[i] = HAL_ADC_GetValue(&hadc1);
 80008e4:	480e      	ldr	r0, [pc, #56]	@ (8000920 <AverageFiltered+0x5c>)
 80008e6:	f000 fed5 	bl	8001694 <HAL_ADC_GetValue>
 80008ea:	4602      	mov	r2, r0
 80008ec:	490d      	ldr	r1, [pc, #52]	@ (8000924 <AverageFiltered+0x60>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
       sum += adcValues[i];
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <AverageFiltered+0x60>)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	607b      	str	r3, [r7, #4]
   for (int i = 0; i < ADC_SAMPLES; i++) {
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b63      	cmp	r3, #99	@ 0x63
 800090c:	dde2      	ble.n	80008d4 <AverageFiltered+0x10>
   }

    return sum / ADC_SAMPLES;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <AverageFiltered+0x64>)
 8000912:	fba2 2303 	umull	r2, r3, r2, r3
 8000916:	095b      	lsrs	r3, r3, #5
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000080 	.word	0x20000080
 8000924:	20000154 	.word	0x20000154
 8000928:	51eb851f 	.word	0x51eb851f

0800092c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0a2      	sub	sp, #136	@ 0x88
 8000930:	af02      	add	r7, sp, #8
 8000932:	6078      	str	r0, [r7, #4]


if (hadc->Instance == ADC1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a59      	ldr	r2, [pc, #356]	@ (8000aa0 <HAL_ADC_ConvCpltCallback+0x174>)
 800093a:	4293      	cmp	r3, r2
 800093c:	f040 80ac 	bne.w	8000a98 <HAL_ADC_ConvCpltCallback+0x16c>
{

    	adc_value = AverageFiltered();
 8000940:	f7ff ffc0 	bl	80008c4 <AverageFiltered>
 8000944:	4603      	mov	r3, r0
 8000946:	4a57      	ldr	r2, [pc, #348]	@ (8000aa4 <HAL_ADC_ConvCpltCallback+0x178>)
 8000948:	6013      	str	r3, [r2, #0]
        uint32_t newstep = map(adc_value, 0, 4095, 0, 1600); // Using microstepping 1/8 steps
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <HAL_ADC_ConvCpltCallback+0x178>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800095c:	2100      	movs	r1, #0
 800095e:	f7ff ff93 	bl	8000888 <map>
 8000962:	4603      	mov	r3, r0
 8000964:	67fb      	str	r3, [r7, #124]	@ 0x7c

        while(newstep > currentstep - 5 && newstep < currentstep + 5) // Khử nhiễu
 8000966:	e012      	b.n	800098e <HAL_ADC_ConvCpltCallback+0x62>
        {
         	adc_value = AverageFiltered();
 8000968:	f7ff ffac 	bl	80008c4 <AverageFiltered>
 800096c:	4603      	mov	r3, r0
 800096e:	4a4d      	ldr	r2, [pc, #308]	@ (8000aa4 <HAL_ADC_ConvCpltCallback+0x178>)
 8000970:	6013      	str	r3, [r2, #0]
        	newstep = map(adc_value, 0, 4095, 0, 1600); // Using microstepping 1/8 steps
 8000972:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <HAL_ADC_ConvCpltCallback+0x178>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000984:	2100      	movs	r1, #0
 8000986:	f7ff ff7f 	bl	8000888 <map>
 800098a:	4603      	mov	r3, r0
 800098c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while(newstep > currentstep - 5 && newstep < currentstep + 5) // Khử nhiễu
 800098e:	4b46      	ldr	r3, [pc, #280]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b05      	subs	r3, #5
 8000994:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000996:	429a      	cmp	r2, r3
 8000998:	d905      	bls.n	80009a6 <HAL_ADC_ConvCpltCallback+0x7a>
 800099a:	4b43      	ldr	r3, [pc, #268]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3305      	adds	r3, #5
 80009a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d3e0      	bcc.n	8000968 <HAL_ADC_ConvCpltCallback+0x3c>
        }
    	if (currentstep != newstep) // kiểm tra xem biến trở có thay đổi giá trị không
 80009a6:	4b40      	ldr	r3, [pc, #256]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d073      	beq.n	8000a98 <HAL_ADC_ConvCpltCallback+0x16c>
    	{
    		    	if (currentstep < newstep)
 80009b0:	4b3d      	ldr	r3, [pc, #244]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d910      	bls.n	80009dc <HAL_ADC_ConvCpltCallback+0xb0>
    		    	{
    		    		HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_ENABLED);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2104      	movs	r1, #4
 80009be:	483b      	ldr	r0, [pc, #236]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x180>)
 80009c0:	f001 fc1c 	bl	80021fc <HAL_GPIO_WritePin>
    		    	    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, DIR_CLOCKWISE);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2102      	movs	r1, #2
 80009c8:	4838      	ldr	r0, [pc, #224]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x180>)
 80009ca:	f001 fc17 	bl	80021fc <HAL_GPIO_WritePin>
    		    	    target_step = newstep - currentstep;
 80009ce:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4a36      	ldr	r2, [pc, #216]	@ (8000ab0 <HAL_ADC_ConvCpltCallback+0x184>)
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e014      	b.n	8000a06 <HAL_ADC_ConvCpltCallback+0xda>
    		    	}

    		        else if (currentstep > newstep)
 80009dc:	4b32      	ldr	r3, [pc, #200]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d20f      	bcs.n	8000a06 <HAL_ADC_ConvCpltCallback+0xda>
    		    	{
    		    	    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_ENABLED);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2104      	movs	r1, #4
 80009ea:	4830      	ldr	r0, [pc, #192]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x180>)
 80009ec:	f001 fc06 	bl	80021fc <HAL_GPIO_WritePin>
    		    	    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, DIR_COUNTERCLOCKWISE);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	482d      	ldr	r0, [pc, #180]	@ (8000aac <HAL_ADC_ConvCpltCallback+0x180>)
 80009f6:	f001 fc01 	bl	80021fc <HAL_GPIO_WritePin>
    		    	    target_step = currentstep - newstep;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <HAL_ADC_ConvCpltCallback+0x184>)
 8000a04:	6013      	str	r3, [r2, #0]
    		    	}

    		    	HAL_ADC_Stop_IT(&hadc1);
 8000a06:	482b      	ldr	r0, [pc, #172]	@ (8000ab4 <HAL_ADC_ConvCpltCallback+0x188>)
 8000a08:	f000 fe10 	bl	800162c <HAL_ADC_Stop_IT>
    		        HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	482a      	ldr	r0, [pc, #168]	@ (8000ab8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000a10:	f002 fa30 	bl	8002e74 <HAL_TIM_PWM_Start_IT>
    		    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34

    		    	flag_enable_PWM = 1;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <HAL_ADC_ConvCpltCallback+0x190>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]

    		        char buffer_step[50];
    		    	int length_step = snprintf(buffer_step, sizeof(buffer_step), "Step: %lu\r\n", newstep);
 8000a24:	f107 0008 	add.w	r0, r7, #8
 8000a28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a2a:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <HAL_ADC_ConvCpltCallback+0x194>)
 8000a2c:	2132      	movs	r1, #50	@ 0x32
 8000a2e:	f003 ffeb 	bl	8004a08 <sniprintf>
 8000a32:	67b8      	str	r0, [r7, #120]	@ 0x78
    		    	HAL_UART_Transmit(&huart1, (uint8_t*)buffer_step, length_step, 1000);
 8000a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	f107 0108 	add.w	r1, r7, #8
 8000a3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a40:	4820      	ldr	r0, [pc, #128]	@ (8000ac4 <HAL_ADC_ConvCpltCallback+0x198>)
 8000a42:	f003 f9c7 	bl	8003dd4 <HAL_UART_Transmit>

    		        uint32_t angle = (newstep / microstepping) * stepPerAngle;
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fce5 	bl	8000420 <__aeabi_ui2f>
 8000a56:	4602      	mov	r2, r0
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <HAL_ADC_ConvCpltCallback+0x1a0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4610      	mov	r0, r2
 8000a60:	f7ff fb74 	bl	800014c <__aeabi_fmul>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd32 	bl	80004d0 <__aeabi_f2uiz>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	677b      	str	r3, [r7, #116]	@ 0x74
    		    	char buffer_angle[50];
    		    	int length_angle = snprintf(buffer_angle, sizeof(buffer_angle), "Angle Value: %lu\r\n",angle);
 8000a70:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a76:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8000a78:	2132      	movs	r1, #50	@ 0x32
 8000a7a:	f003 ffc5 	bl	8004a08 <sniprintf>
 8000a7e:	6738      	str	r0, [r7, #112]	@ 0x70
    		    	HAL_UART_Transmit(&huart1, (uint8_t*)buffer_angle, length_angle, 1000);
 8000a80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8c:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <HAL_ADC_ConvCpltCallback+0x198>)
 8000a8e:	f003 f9a1 	bl	8003dd4 <HAL_UART_Transmit>

    		    	currentstep = newstep;
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a96:	6013      	str	r3, [r2, #0]

     }

}

}
 8000a98:	bf00      	nop
 8000a9a:	3780      	adds	r7, #128	@ 0x80
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	20000150 	.word	0x20000150
 8000aa8:	20000144 	.word	0x20000144
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	20000148 	.word	0x20000148
 8000ab4:	20000080 	.word	0x20000080
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	2000014c 	.word	0x2000014c
 8000ac0:	080053a8 	.word	0x080053a8
 8000ac4:	200000f8 	.word	0x200000f8
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	080053b4 	.word	0x080053b4

08000ad4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(flag_enable_PWM == 1)
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d11e      	bne.n	8000b22 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
	{
		 count++;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000aee:	801a      	strh	r2, [r3, #0]

		 if (count >= target_step)
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d311      	bcc.n	8000b22 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
		 {
		     HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, MOTOR_DISABLED);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2104      	movs	r1, #4
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b04:	f001 fb7a 	bl	80021fc <HAL_GPIO_WritePin>
		     count = 0;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
		     flag_enable_PWM = 0;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
		     HAL_ADC_Start_IT(&hadc1);
 8000b14:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000b16:	f000 fcd3 	bl	80014c0 <HAL_ADC_Start_IT>
		     HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000b1e:	f002 fa99 	bl	8003054 <HAL_TIM_PWM_Stop_IT>
		 }
	}
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000014c 	.word	0x2000014c
 8000b30:	20000142 	.word	0x20000142
 8000b34:	20000148 	.word	0x20000148
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	200000b0 	.word	0x200000b0

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a14      	ldr	r2, [pc, #80]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_MspInit+0x5c>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_MspInit+0x60>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_MspInit+0x60>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_ADC_MspInit+0x7c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d129      	bne.n	8000c28 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a16      	ldr	r2, [pc, #88]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_ADC_MspInit+0x84>)
 8000c14:	f001 f96e 	bl	8001ef4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	2012      	movs	r0, #18
 8000c1e:	f001 f880 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c22:	2012      	movs	r0, #18
 8000c24:	f001 f899 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40012400 	.word	0x40012400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4c:	d113      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <HAL_TIM_Base_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_TIM_Base_MspInit+0x44>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	201c      	movs	r0, #28
 8000c6c:	f001 f859 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c70:	201c      	movs	r0, #28
 8000c72:	f001 f872 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca2:	d117      	bne.n	8000cd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <HAL_TIM_MspPostInit+0x5c>)
 8000cd0:	f001 f910 	bl	8001ef4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a20      	ldr	r2, [pc, #128]	@ (8000d80 <HAL_UART_MspInit+0x9c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d139      	bne.n	8000d78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a1e      	ldr	r2, [pc, #120]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_UART_MspInit+0xa0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <HAL_UART_MspInit+0xa4>)
 8000d4a:	f001 f8d3 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <HAL_UART_MspInit+0xa4>)
 8000d64:	f001 f8c6 	bl	8001ef4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2025      	movs	r0, #37	@ 0x25
 8000d6e:	f000 ffd8 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d72:	2025      	movs	r0, #37	@ 0x25
 8000d74:	f000 fff1 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8c8 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <ADC1_2_IRQHandler+0x10>)
 8000dea:	f000 fc5f 	bl	80016ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000080 	.word	0x20000080

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <TIM2_IRQHandler+0x10>)
 8000dfe:	f002 f9db 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000b0 	.word	0x200000b0

08000e0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <USART1_IRQHandler+0x10>)
 8000e12:	f003 f88f 	bl	8003f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000f8 	.word	0x200000f8

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 fe16 	bl	8004a80 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20005000 	.word	0x20005000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200002e4 	.word	0x200002e4
 8000e88:	20000438 	.word	0x20000438

08000e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e98:	f7ff fff8 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e9c:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e9e:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb4:	4c09      	ldr	r4, [pc, #36]	@ (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f003 fde3 	bl	8004a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff fb23 	bl	8000510 <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ed4:	08005444 	.word	0x08005444
  ldr r2, =_sbss
 8000ed8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000edc:	20000434 	.word	0x20000434

08000ee0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <CAN1_RX1_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_Init+0x28>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <HAL_Init+0x28>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 ff09 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	200f      	movs	r0, #15
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fe26 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ff21 	bl	8001d76 <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 fee9 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a03      	ldr	r2, [pc, #12]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	200002e8 	.word	0x200002e8

08000f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	@ (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	200002e8 	.word	0x200002e8

08000fa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e0be      	b.n	8001148 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fde4 	bl	8000bb4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fd77 	bl	8001ae0 <ADC_ConversionStop_Disable>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 8099 	bne.w	8001136 <HAL_ADC_Init+0x18e>
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 8095 	bne.w	8001136 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001010:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001014:	f023 0302 	bic.w	r3, r3, #2
 8001018:	f043 0202 	orr.w	r2, r3, #2
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001028:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b1b      	ldrb	r3, [r3, #12]
 800102e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001030:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	4313      	orrs	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001040:	d003      	beq.n	800104a <HAL_ADC_Init+0xa2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d102      	bne.n	8001050 <HAL_ADC_Init+0xa8>
 800104a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104e:	e000      	b.n	8001052 <HAL_ADC_Init+0xaa>
 8001050:	2300      	movs	r3, #0
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7d1b      	ldrb	r3, [r3, #20]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d119      	bne.n	8001094 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7b1b      	ldrb	r3, [r3, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	035a      	lsls	r2, r3, #13
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e00b      	b.n	8001094 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001080:	f043 0220 	orr.w	r2, r3, #32
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <HAL_ADC_Init+0x1a8>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c4:	d003      	beq.n	80010ce <HAL_ADC_Init+0x126>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d104      	bne.n	80010d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	051b      	lsls	r3, r3, #20
 80010d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_ADC_Init+0x1ac>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d10b      	bne.n	8001114 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001112:	e018      	b.n	8001146 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	f023 0312 	bic.w	r3, r3, #18
 800111c:	f043 0210 	orr.w	r2, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001134:	e007      	b.n	8001146 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001146:	7dfb      	ldrb	r3, [r7, #23]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	ffe1f7fd 	.word	0xffe1f7fd
 8001154:	ff1f0efe 	.word	0xff1f0efe

08001158 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Start+0x1a>
 800116e:	2302      	movs	r3, #2
 8001170:	e098      	b.n	80012a4 <HAL_ADC_Start+0x14c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 fc56 	bl	8001a2c <ADC_Enable>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8087 	bne.w	800129a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a41      	ldr	r2, [pc, #260]	@ (80012ac <HAL_ADC_Start+0x154>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d105      	bne.n	80011b6 <HAL_ADC_Start+0x5e>
 80011aa:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <HAL_ADC_Start+0x158>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d115      	bne.n	80011e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d026      	beq.n	800121e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011e0:	e01d      	b.n	800121e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <HAL_ADC_Start+0x158>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d004      	beq.n	8001202 <HAL_ADC_Start+0xaa>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a2b      	ldr	r2, [pc, #172]	@ (80012ac <HAL_ADC_Start+0x154>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10d      	bne.n	800121e <HAL_ADC_Start+0xc6>
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_ADC_Start+0x158>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001216:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122e:	f023 0206 	bic.w	r2, r3, #6
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001236:	e002      	b.n	800123e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f06f 0202 	mvn.w	r2, #2
 800124e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800125a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800125e:	d113      	bne.n	8001288 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001264:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <HAL_ADC_Start+0x154>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d105      	bne.n	8001276 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_ADC_Start+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d108      	bne.n	8001288 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	e00c      	b.n	80012a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e003      	b.n	80012a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40012800 	.word	0x40012800
 80012b0:	40012400 	.word	0x40012400

080012b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012ca:	f7ff fe63 	bl	8000f94 <HAL_GetTick>
 80012ce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	f043 0220 	orr.w	r2, r3, #32
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0d3      	b.n	800149e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d131      	bne.n	8001368 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800130e:	2b00      	cmp	r3, #0
 8001310:	d12a      	bne.n	8001368 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001312:	e021      	b.n	8001358 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d01d      	beq.n	8001358 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_ADC_PollForConversion+0x7e>
 8001322:	f7ff fe37 	bl	8000f94 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d212      	bcs.n	8001358 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10b      	bne.n	8001358 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	f043 0204 	orr.w	r2, r3, #4
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0a2      	b.n	800149e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0d6      	beq.n	8001314 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001366:	e070      	b.n	800144a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001368:	4b4f      	ldr	r3, [pc, #316]	@ (80014a8 <HAL_ADC_PollForConversion+0x1f4>)
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	2002      	movs	r0, #2
 800136e:	f001 fc23 	bl	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001372:	4603      	mov	r3, r0
 8001374:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <HAL_ADC_PollForConversion+0x1f8>)
 8001380:	400b      	ands	r3, r1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_ADC_PollForConversion+0x104>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68d9      	ldr	r1, [r3, #12]
 800138c:	4b48      	ldr	r3, [pc, #288]	@ (80014b0 <HAL_ADC_PollForConversion+0x1fc>)
 800138e:	400b      	ands	r3, r1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d111      	bne.n	80013b8 <HAL_ADC_PollForConversion+0x104>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	4b46      	ldr	r3, [pc, #280]	@ (80014b4 <HAL_ADC_PollForConversion+0x200>)
 800139c:	400b      	ands	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d108      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x100>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68d9      	ldr	r1, [r3, #12]
 80013a8:	4b43      	ldr	r3, [pc, #268]	@ (80014b8 <HAL_ADC_PollForConversion+0x204>)
 80013aa:	400b      	ands	r3, r1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_PollForConversion+0x100>
 80013b0:	2314      	movs	r3, #20
 80013b2:	e020      	b.n	80013f6 <HAL_ADC_PollForConversion+0x142>
 80013b4:	2329      	movs	r3, #41	@ 0x29
 80013b6:	e01e      	b.n	80013f6 <HAL_ADC_PollForConversion+0x142>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_ADC_PollForConversion+0x200>)
 80013c0:	400b      	ands	r3, r1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x120>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <HAL_ADC_PollForConversion+0x204>)
 80013ce:	400b      	ands	r3, r1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00d      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x13c>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6919      	ldr	r1, [r3, #16]
 80013da:	4b38      	ldr	r3, [pc, #224]	@ (80014bc <HAL_ADC_PollForConversion+0x208>)
 80013dc:	400b      	ands	r3, r1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x140>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68d9      	ldr	r1, [r3, #12]
 80013e8:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <HAL_ADC_PollForConversion+0x208>)
 80013ea:	400b      	ands	r3, r1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_PollForConversion+0x140>
 80013f0:	2354      	movs	r3, #84	@ 0x54
 80013f2:	e000      	b.n	80013f6 <HAL_ADC_PollForConversion+0x142>
 80013f4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013fc:	e021      	b.n	8001442 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d01a      	beq.n	800143c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d007      	beq.n	800141c <HAL_ADC_PollForConversion+0x168>
 800140c:	f7ff fdc2 	bl	8000f94 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d20f      	bcs.n	800143c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d90b      	bls.n	800143c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	f043 0204 	orr.w	r2, r3, #4
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e030      	b.n	800149e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	429a      	cmp	r2, r3
 8001448:	d8d9      	bhi.n	80013fe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f06f 0212 	mvn.w	r2, #18
 8001452:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001458:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800146a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800146e:	d115      	bne.n	800149c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008
 80014ac:	24924924 	.word	0x24924924
 80014b0:	00924924 	.word	0x00924924
 80014b4:	12492492 	.word	0x12492492
 80014b8:	00492492 	.word	0x00492492
 80014bc:	00249249 	.word	0x00249249

080014c0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ADC_Start_IT+0x1a>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0a0      	b.n	800161c <HAL_ADC_Start_IT+0x15c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 faa2 	bl	8001a2c <ADC_Enable>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f040 808f 	bne.w	8001612 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a45      	ldr	r2, [pc, #276]	@ (8001624 <HAL_ADC_Start_IT+0x164>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d105      	bne.n	800151e <HAL_ADC_Start_IT+0x5e>
 8001512:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <HAL_ADC_Start_IT+0x168>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	2b00      	cmp	r3, #0
 8001536:	d026      	beq.n	8001586 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001540:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001548:	e01d      	b.n	8001586 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <HAL_ADC_Start_IT+0x168>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d004      	beq.n	800156a <HAL_ADC_Start_IT+0xaa>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <HAL_ADC_Start_IT+0x164>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10d      	bne.n	8001586 <HAL_ADC_Start_IT+0xc6>
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_ADC_Start_IT+0x168>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800157e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	f023 0206 	bic.w	r2, r3, #6
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800159e:	e002      	b.n	80015a6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f06f 0202 	mvn.w	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0220 	orr.w	r2, r2, #32
 80015c6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015d2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015d6:	d113      	bne.n	8001600 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015dc:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <HAL_ADC_Start_IT+0x164>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_ADC_Start_IT+0x168>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d108      	bne.n	8001600 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	e00c      	b.n	800161a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e003      	b.n	800161a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40012800 	.word	0x40012800
 8001628:	40012400 	.word	0x40012400

0800162c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Stop_IT+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e022      	b.n	800168c <HAL_ADC_Stop_IT+0x60>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fa46 	bl	8001ae0 <ADC_ConversionStop_Disable>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d111      	bne.n	8001682 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0220 	bic.w	r2, r2, #32
 800166c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03e      	beq.n	800174c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d039      	beq.n	800174c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016fe:	d11d      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001704:	2b00      	cmp	r3, #0
 8001706:	d119      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0220 	bic.w	r2, r2, #32
 8001716:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff f8f5 	bl	800092c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0212 	mvn.w	r2, #18
 800174a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04d      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d048      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001782:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001786:	d012      	beq.n	80017ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001792:	2b00      	cmp	r3, #0
 8001794:	d125      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017a0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017a4:	d11d      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d119      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f9bd 	bl	8001b62 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 020c 	mvn.w	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f809 	bl	800182a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0201 	mvn.w	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_ADC_ConfigChannel+0x20>
 8001858:	2302      	movs	r3, #2
 800185a:	e0dc      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x1da>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b06      	cmp	r3, #6
 800186a:	d81c      	bhi.n	80018a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b05      	subs	r3, #5
 800187e:	221f      	movs	r2, #31
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b05      	subs	r3, #5
 8001898:	fa00 f203 	lsl.w	r2, r0, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80018a4:	e03c      	b.n	8001920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b0c      	cmp	r3, #12
 80018ac:	d81c      	bhi.n	80018e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	3b23      	subs	r3, #35	@ 0x23
 80018c0:	221f      	movs	r2, #31
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4019      	ands	r1, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b23      	subs	r3, #35	@ 0x23
 80018da:	fa00 f203 	lsl.w	r2, r0, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e6:	e01b      	b.n	8001920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b41      	subs	r3, #65	@ 0x41
 80018fa:	221f      	movs	r2, #31
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b41      	subs	r3, #65	@ 0x41
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d91c      	bls.n	8001962 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68d9      	ldr	r1, [r3, #12]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	3b1e      	subs	r3, #30
 800193a:	2207      	movs	r2, #7
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6898      	ldr	r0, [r3, #8]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	3b1e      	subs	r3, #30
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	e019      	b.n	8001996 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6919      	ldr	r1, [r3, #16]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6898      	ldr	r0, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d003      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019a2:	2b11      	cmp	r3, #17
 80019a4:	d132      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001a20 <HAL_ADC_ConfigChannel+0x1e4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d125      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d126      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d11a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019d6:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <HAL_ADC_ConfigChannel+0x1e8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a13      	ldr	r2, [pc, #76]	@ (8001a28 <HAL_ADC_ConfigChannel+0x1ec>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9a      	lsrs	r2, r3, #18
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x1b2>
 80019fa:	e007      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f043 0220 	orr.w	r2, r3, #32
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	40012400 	.word	0x40012400
 8001a24:	20000008 	.word	0x20000008
 8001a28:	431bde83 	.word	0x431bde83

08001a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d040      	beq.n	8001acc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <ADC_Enable+0xac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <ADC_Enable+0xb0>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a76:	f7ff fa8d 	bl	8000f94 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a7c:	e01f      	b.n	8001abe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a7e:	f7ff fa89 	bl	8000f94 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d918      	bls.n	8001abe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d011      	beq.n	8001abe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e007      	b.n	8001ace <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d1d8      	bne.n	8001a7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	431bde83 	.word	0x431bde83

08001ae0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12e      	bne.n	8001b58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0a:	f7ff fa43 	bl	8000f94 <HAL_GetTick>
 8001b0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	e01b      	b.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b12:	f7ff fa3f 	bl	8000f94 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d914      	bls.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10d      	bne.n	8001b4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d0dc      	beq.n	8001b12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4906      	ldr	r1, [pc, #24]	@ (8001c0c <__NVIC_EnableIRQ+0x34>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff90 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff2d 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff42 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff35 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d008      	beq.n	8001db8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e020      	b.n	8001dfa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 020e 	bic.w	r2, r2, #14
 8001dc6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d005      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2204      	movs	r2, #4
 8001e20:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e051      	b.n	8001ecc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020e 	bic.w	r2, r2, #14
 8001e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <HAL_DMA_Abort_IT+0xd4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d029      	beq.n	8001ea6 <HAL_DMA_Abort_IT+0xa2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <HAL_DMA_Abort_IT+0xd8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x9e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_DMA_Abort_IT+0xdc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01a      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x98>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <HAL_DMA_Abort_IT+0xe0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d012      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x92>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_DMA_Abort_IT+0xe4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00a      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x8c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <HAL_DMA_Abort_IT+0xe8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d102      	bne.n	8001e8a <HAL_DMA_Abort_IT+0x86>
 8001e84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e88:	e00e      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001e8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e8e:	e00b      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001e90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e94:	e008      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9a:	e005      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea0:	e002      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_Abort_IT+0xa4>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_DMA_Abort_IT+0xec>)
 8001eaa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
    } 
  }
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40020008 	.word	0x40020008
 8001edc:	4002001c 	.word	0x4002001c
 8001ee0:	40020030 	.word	0x40020030
 8001ee4:	40020044 	.word	0x40020044
 8001ee8:	40020058 	.word	0x40020058
 8001eec:	4002006c 	.word	0x4002006c
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b08b      	sub	sp, #44	@ 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e169      	b.n	80021dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8158 	bne.w	80021d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f30:	4a98      	ldr	r2, [pc, #608]	@ (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d875      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f36:	4a98      	ldr	r2, [pc, #608]	@ (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d058      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f3c:	4a96      	ldr	r2, [pc, #600]	@ (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d86f      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f42:	4a96      	ldr	r2, [pc, #600]	@ (800219c <HAL_GPIO_Init+0x2a8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d052      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f48:	4a94      	ldr	r2, [pc, #592]	@ (800219c <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d869      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a94      	ldr	r2, [pc, #592]	@ (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04c      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f54:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d863      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f5a:	4a92      	ldr	r2, [pc, #584]	@ (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d046      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f60:	4a90      	ldr	r2, [pc, #576]	@ (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d85d      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d82a      	bhi.n	8001fc0 <HAL_GPIO_Init+0xcc>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d859      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <HAL_GPIO_Init+0x80>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fc9 	.word	0x08001fc9
 8001f7c:	08001fdb 	.word	0x08001fdb
 8001f80:	0800201d 	.word	0x0800201d
 8001f84:	08002023 	.word	0x08002023
 8001f88:	08002023 	.word	0x08002023
 8001f8c:	08002023 	.word	0x08002023
 8001f90:	08002023 	.word	0x08002023
 8001f94:	08002023 	.word	0x08002023
 8001f98:	08002023 	.word	0x08002023
 8001f9c:	08002023 	.word	0x08002023
 8001fa0:	08002023 	.word	0x08002023
 8001fa4:	08002023 	.word	0x08002023
 8001fa8:	08002023 	.word	0x08002023
 8001fac:	08002023 	.word	0x08002023
 8001fb0:	08002023 	.word	0x08002023
 8001fb4:	08002023 	.word	0x08002023
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fe5 	.word	0x08001fe5
 8001fc0:	4a79      	ldr	r2, [pc, #484]	@ (80021a8 <HAL_GPIO_Init+0x2b4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc6:	e02c      	b.n	8002022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e029      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e024      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e01f      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e01a      	b.n	8002024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e013      	b.n	8002024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	611a      	str	r2, [r3, #16]
          break;
 800200e:	e009      	b.n	8002024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002010:	2308      	movs	r3, #8
 8002012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	615a      	str	r2, [r3, #20]
          break;
 800201a:	e003      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x130>
          break;
 8002022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	@ 0xff
 8002028:	d801      	bhi.n	800202e <HAL_GPIO_Init+0x13a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_Init+0x13e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	@ 0xff
 8002038:	d802      	bhi.n	8002040 <HAL_GPIO_Init+0x14c>
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x152>
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	3b08      	subs	r3, #8
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	210f      	movs	r1, #15
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80b1 	beq.w	80021d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002074:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a4c      	ldr	r2, [pc, #304]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b4a      	ldr	r3, [pc, #296]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_GPIO_Init+0x2bc>)
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <HAL_GPIO_Init+0x2c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x1ec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	@ (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1e8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <HAL_GPIO_Init+0x2c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1e4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	@ (80021c0 <HAL_GPIO_Init+0x2cc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e004      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d8:	2302      	movs	r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2300      	movs	r3, #0
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	f002 0203 	and.w	r2, r2, #3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4093      	lsls	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f2:	492f      	ldr	r1, [pc, #188]	@ (80021b0 <HAL_GPIO_Init+0x2bc>)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	492c      	ldr	r1, [pc, #176]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4928      	ldr	r1, [pc, #160]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4922      	ldr	r1, [pc, #136]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	491e      	ldr	r1, [pc, #120]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4918      	ldr	r1, [pc, #96]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4914      	ldr	r1, [pc, #80]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d021      	beq.n	80021c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	e021      	b.n	80021d6 <HAL_GPIO_Init+0x2e2>
 8002192:	bf00      	nop
 8002194:	10320000 	.word	0x10320000
 8002198:	10310000 	.word	0x10310000
 800219c:	10220000 	.word	0x10220000
 80021a0:	10210000 	.word	0x10210000
 80021a4:	10120000 	.word	0x10120000
 80021a8:	10110000 	.word	0x10110000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4909      	ldr	r1, [pc, #36]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f ae8e 	bne.w	8001f08 <HAL_GPIO_Init+0x14>
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	372c      	adds	r7, #44	@ 0x2c
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e272      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8087 	beq.w	800235a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b92      	ldr	r3, [pc, #584]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00c      	beq.n	8002272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4b8f      	ldr	r3, [pc, #572]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d112      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
 8002264:	4b8c      	ldr	r3, [pc, #560]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002270:	d10b      	bne.n	800228a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002272:	4b89      	ldr	r3, [pc, #548]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06c      	beq.n	8002358 <HAL_RCC_OscConfig+0x12c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d168      	bne.n	8002358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e24c      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x76>
 8002294:	4b80      	ldr	r3, [pc, #512]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a7f      	ldr	r2, [pc, #508]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e02e      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x98>
 80022aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a77      	ldr	r2, [pc, #476]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0xbc>
 80022ce:	4b72      	ldr	r3, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a71      	ldr	r2, [pc, #452]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6f      	ldr	r3, [pc, #444]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xd4>
 80022e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b68      	ldr	r3, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a67      	ldr	r2, [pc, #412]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fe44 	bl	8000f94 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fe40 	bl	8000f94 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	@ 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e200      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b5d      	ldr	r3, [pc, #372]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xe4>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fe30 	bl	8000f94 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fe2c 	bl	8000f94 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	@ 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1ec      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x10c>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002366:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002372:	4b49      	ldr	r3, [pc, #292]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
 800237e:	4b46      	ldr	r3, [pc, #280]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1c0      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4939      	ldr	r1, [pc, #228]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_RCC_OscConfig+0x270>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fde5 	bl	8000f94 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7fe fde1 	bl	8000f94 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4927      	ldr	r1, [pc, #156]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b26      	ldr	r3, [pc, #152]	@ (800249c <HAL_RCC_OscConfig+0x270>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fdc4 	bl	8000f94 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7fe fdc0 	bl	8000f94 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e180      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03a      	beq.n	80024b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d019      	beq.n	8002476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fda4 	bl	8000f94 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fda0 	bl	8000f94 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e160      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_RCC_OscConfig+0x26c>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246e:	2001      	movs	r0, #1
 8002470:	f000 face 	bl	8002a10 <RCC_Delay>
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_OscConfig+0x274>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe fd8a 	bl	8000f94 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002482:	e00f      	b.n	80024a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fd86 	bl	8000f94 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d908      	bls.n	80024a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e146      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	42420000 	.word	0x42420000
 80024a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e9      	bne.n	8002484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a6 	beq.w	800260a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c2:	4b8b      	ldr	r3, [pc, #556]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a87      	ldr	r2, [pc, #540]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]
 80024da:	4b85      	ldr	r3, [pc, #532]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ea:	4b82      	ldr	r3, [pc, #520]	@ (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d118      	bne.n	8002528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f6:	4b7f      	ldr	r3, [pc, #508]	@ (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	@ (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002502:	f7fe fd47 	bl	8000f94 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250a:	f7fe fd43 	bl	8000f94 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	@ 0x64
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e103      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <HAL_RCC_OscConfig+0x4c8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x312>
 8002530:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	e02d      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x334>
 8002546:	4b6a      	ldr	r3, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a69      	ldr	r2, [pc, #420]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b67      	ldr	r3, [pc, #412]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	e01c      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b05      	cmp	r3, #5
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_OscConfig+0x356>
 8002568:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a60      	ldr	r2, [pc, #384]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a5d      	ldr	r2, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	e00b      	b.n	800259a <HAL_RCC_OscConfig+0x36e>
 8002582:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f023 0301 	bic.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	4b58      	ldr	r3, [pc, #352]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a57      	ldr	r2, [pc, #348]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 0304 	bic.w	r3, r3, #4
 8002598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fcf7 	bl	8000f94 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fcf3 	bl	8000f94 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0b1      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCC_OscConfig+0x37e>
 80025cc:	e014      	b.n	80025f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe fce1 	bl	8000f94 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fcdd 	bl	8000f94 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e09b      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	4b40      	ldr	r3, [pc, #256]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ee      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fe:	4b3c      	ldr	r3, [pc, #240]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d061      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d146      	bne.n	80026b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b33      	ldr	r3, [pc, #204]	@ (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fcb1 	bl	8000f94 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fcad 	bl	8000f94 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e06d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	4b29      	ldr	r3, [pc, #164]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265e:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4921      	ldr	r1, [pc, #132]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b1f      	ldr	r3, [pc, #124]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a19      	ldr	r1, [r3, #32]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	430b      	orrs	r3, r1
 8002682:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b1b      	ldr	r3, [pc, #108]	@ (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fc81 	bl	8000f94 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fc7d 	bl	8000f94 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x46a>
 80026b4:	e035      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc6a 	bl	8000f94 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fc66 	bl	8000f94 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e026      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x498>
 80026e2:	e01e      	b.n	8002722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e019      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCC_OscConfig+0x500>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0d0      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b6a      	ldr	r3, [pc, #424]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b67      	ldr	r3, [pc, #412]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4965      	ldr	r1, [pc, #404]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a52      	ldr	r2, [pc, #328]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d040      	beq.n	8002850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e073      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4936      	ldr	r1, [pc, #216]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7fe fbb8 	bl	8000f94 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe fbb4 	bl	8000f94 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e053      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 020c 	and.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1eb      	bne.n	8002828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d210      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4922      	ldr	r1, [pc, #136]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028aa:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	@ (80028f8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x1cc>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_ClockConfig+0x1d0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb16 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	080053c8 	.word	0x080053c8
 80028fc:	20000008 	.word	0x20000008
 8002900:	2000000c 	.word	0x2000000c

08002904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e027      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002936:	613b      	str	r3, [r7, #16]
      break;
 8002938:	e027      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x94>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c5b      	lsrs	r3, r3, #17
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	4a11      	ldr	r2, [pc, #68]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e004      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	e002      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	613b      	str	r3, [r7, #16]
      break;
 8002988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298a:	693b      	ldr	r3, [r7, #16]
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	007a1200 	.word	0x007a1200
 80029a0:	080053e0 	.word	0x080053e0
 80029a4:	080053f0 	.word	0x080053f0
 80029a8:	003d0900 	.word	0x003d0900

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b02      	ldr	r3, [pc, #8]	@ (80029bc <HAL_RCC_GetHCLKFreq+0x10>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000008 	.word	0x20000008

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff2 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	@ (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	080053d8 	.word	0x080053d8

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffde 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0adb      	lsrs	r3, r3, #11
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	@ (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	080053d8 	.word	0x080053d8

08002a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <RCC_Delay+0x34>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <RCC_Delay+0x38>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0a5b      	lsrs	r3, r3, #9
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a2c:	bf00      	nop
  }
  while (Delay --);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	60fa      	str	r2, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f9      	bne.n	8002a2c <RCC_Delay+0x1c>
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000008 	.word	0x20000008
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d07d      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4c      	ldr	r3, [pc, #304]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b49      	ldr	r3, [pc, #292]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a94:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa0:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aac:	f7fe fa72 	bl	8000f94 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fa6e 	bl	8000f94 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e06d      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad2:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02e      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d027      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af0:	4b2e      	ldr	r3, [pc, #184]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afa:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b00:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b06:	4a29      	ldr	r2, [pc, #164]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fa3d 	bl	8000f94 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fa39 	bl	8000f94 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e036      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ee      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b40:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4917      	ldr	r1, [pc, #92]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b70:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	490b      	ldr	r1, [pc, #44]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b8e:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4904      	ldr	r1, [pc, #16]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42420440 	.word	0x42420440

08002bb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	f200 808a 	bhi.w	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d045      	beq.n	8002c74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d075      	beq.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bee:	e082      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002bf0:	4b46      	ldr	r3, [pc, #280]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bf6:	4b45      	ldr	r3, [pc, #276]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07b      	beq.n	8002cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	0c9b      	lsrs	r3, r3, #18
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	4a41      	ldr	r2, [pc, #260]	@ (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d015      	beq.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	0c5b      	lsrs	r3, r3, #17
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	4a3b      	ldr	r2, [pc, #236]	@ (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c34:	4a38      	ldr	r2, [pc, #224]	@ (8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4a34      	ldr	r2, [pc, #208]	@ (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c50:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	61bb      	str	r3, [r7, #24]
      break;
 8002c62:	e04a      	b.n	8002cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4a2d      	ldr	r2, [pc, #180]	@ (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
      break;
 8002c72:	e042      	b.n	8002cfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	d108      	bne.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c94:	61bb      	str	r3, [r7, #24]
 8002c96:	e01f      	b.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca2:	d109      	bne.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002cb0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cc2:	d11c      	bne.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cc4:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002cd0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002cd4:	61bb      	str	r3, [r7, #24]
      break;
 8002cd6:	e012      	b.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cd8:	e011      	b.n	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cda:	f7ff fe85 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0b9b      	lsrs	r3, r3, #14
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	61bb      	str	r3, [r7, #24]
      break;
 8002cf4:	e004      	b.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cfe:	bf00      	nop
    }
  }
  return (frequency);
 8002d00:	69bb      	ldr	r3, [r7, #24]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	080053f4 	.word	0x080053f4
 8002d14:	08005404 	.word	0x08005404
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	003d0900 	.word	0x003d0900
 8002d20:	aaaaaaab 	.word	0xaaaaaaab

08002d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e041      	b.n	8002dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fd ff76 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fcc6 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e041      	b.n	8002e58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f839 	bl	8002e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f000 fc77 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <HAL_TIM_PWM_Start_IT+0x28>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e022      	b.n	8002ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d109      	bne.n	8002eb6 <HAL_TIM_PWM_Start_IT+0x42>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e015      	b.n	8002ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d109      	bne.n	8002ed0 <HAL_TIM_PWM_Start_IT+0x5c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e008      	b.n	8002ee2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0a9      	b.n	800303e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start_IT+0x86>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef8:	e013      	b.n	8002f22 <HAL_TIM_PWM_Start_IT+0xae>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start_IT+0x96>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f08:	e00b      	b.n	8002f22 <HAL_TIM_PWM_Start_IT+0xae>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIM_PWM_Start_IT+0xa6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f18:	e003      	b.n	8002f22 <HAL_TIM_PWM_Start_IT+0xae>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d841      	bhi.n	8002fac <HAL_TIM_PWM_Start_IT+0x138>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f65 	.word	0x08002f65
 8002f34:	08002fad 	.word	0x08002fad
 8002f38:	08002fad 	.word	0x08002fad
 8002f3c:	08002fad 	.word	0x08002fad
 8002f40:	08002f77 	.word	0x08002f77
 8002f44:	08002fad 	.word	0x08002fad
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08002fad 	.word	0x08002fad
 8002f50:	08002f89 	.word	0x08002f89
 8002f54:	08002fad 	.word	0x08002fad
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fad 	.word	0x08002fad
 8002f60:	08002f9b 	.word	0x08002f9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0202 	orr.w	r2, r2, #2
 8002f72:	60da      	str	r2, [r3, #12]
      break;
 8002f74:	e01d      	b.n	8002fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0204 	orr.w	r2, r2, #4
 8002f84:	60da      	str	r2, [r3, #12]
      break;
 8002f86:	e014      	b.n	8002fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0208 	orr.w	r2, r2, #8
 8002f96:	60da      	str	r2, [r3, #12]
      break;
 8002f98:	e00b      	b.n	8002fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0210 	orr.w	r2, r2, #16
 8002fa8:	60da      	str	r2, [r3, #12]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d141      	bne.n	800303c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fe23 	bl	8003c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fde:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	@ (8003048 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <HAL_TIM_PWM_Start_IT+0x194>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff2:	d009      	beq.n	8003008 <HAL_TIM_PWM_Start_IT+0x194>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	@ (800304c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_TIM_PWM_Start_IT+0x194>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d010      	beq.n	800303c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	e007      	b.n	800303c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800

08003054 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d841      	bhi.n	80030ec <HAL_TIM_PWM_Stop_IT+0x98>
 8003068:	a201      	add	r2, pc, #4	@ (adr r2, 8003070 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030ed 	.word	0x080030ed
 8003078:	080030ed 	.word	0x080030ed
 800307c:	080030ed 	.word	0x080030ed
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030ed 	.word	0x080030ed
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030ed 	.word	0x080030ed
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030ed 	.word	0x080030ed
 8003098:	080030ed 	.word	0x080030ed
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030db 	.word	0x080030db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0202 	bic.w	r2, r2, #2
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e01d      	b.n	80030f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0204 	bic.w	r2, r2, #4
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e014      	b.n	80030f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0208 	bic.w	r2, r2, #8
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e00b      	b.n	80030f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0210 	bic.w	r2, r2, #16
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fd83 	bl	8003c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	@ (80031b4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d117      	bne.n	8003140 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	f241 1311 	movw	r3, #4369	@ 0x1111
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <HAL_TIM_PWM_Stop_IT+0xec>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	f240 4344 	movw	r3, #1092	@ 0x444
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_TIM_PWM_Stop_IT+0xec>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	f241 1311 	movw	r3, #4369	@ 0x1111
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10f      	bne.n	8003170 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	f240 4344 	movw	r3, #1092	@ 0x444
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d107      	bne.n	8003170 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0201 	bic.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_TIM_PWM_Stop_IT+0x12c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800317e:	e013      	b.n	80031a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d104      	bne.n	8003190 <HAL_TIM_PWM_Stop_IT+0x13c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800318e:	e00b      	b.n	80031a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d104      	bne.n	80031a0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800319e:	e003      	b.n	80031a8 <HAL_TIM_PWM_Stop_IT+0x154>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d020      	beq.n	800321c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0202 	mvn.w	r2, #2
 80031ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa63 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fa56 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fd fc5f 	bl	8000ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d020      	beq.n	8003268 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0204 	mvn.w	r2, #4
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa3d 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fa30 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7fd fc39 	bl	8000ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d020      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0208 	mvn.w	r2, #8
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2204      	movs	r2, #4
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa17 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa0a 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fd fc13 	bl	8000ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0210 	mvn.w	r2, #16
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2208      	movs	r2, #8
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9f1 	bl	80036ce <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f9e4 	bl	80036bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fd fbed 	bl	8000ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00c      	beq.n	8003324 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0201 	mvn.w	r2, #1
 800331c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9c3 	bl	80036aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fced 	bl	8003d22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00c      	beq.n	800336c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9ba 	bl	80036e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0220 	mvn.w	r2, #32
 8003388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fcc0 	bl	8003d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0ae      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	f200 809f 	bhi.w	8003504 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033c6:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003505 	.word	0x08003505
 80033d4:	08003505 	.word	0x08003505
 80033d8:	08003505 	.word	0x08003505
 80033dc:	08003441 	.word	0x08003441
 80033e0:	08003505 	.word	0x08003505
 80033e4:	08003505 	.word	0x08003505
 80033e8:	08003505 	.word	0x08003505
 80033ec:	08003483 	.word	0x08003483
 80033f0:	08003505 	.word	0x08003505
 80033f4:	08003505 	.word	0x08003505
 80033f8:	08003505 	.word	0x08003505
 80033fc:	080034c3 	.word	0x080034c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f9e2 	bl	80037d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0208 	orr.w	r2, r2, #8
 800341a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6999      	ldr	r1, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	619a      	str	r2, [r3, #24]
      break;
 800343e:	e064      	b.n	800350a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa28 	bl	800389c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6999      	ldr	r1, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	021a      	lsls	r2, r3, #8
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	619a      	str	r2, [r3, #24]
      break;
 8003480:	e043      	b.n	800350a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa71 	bl	8003970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0208 	orr.w	r2, r2, #8
 800349c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69da      	ldr	r2, [r3, #28]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0204 	bic.w	r2, r2, #4
 80034ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69d9      	ldr	r1, [r3, #28]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	61da      	str	r2, [r3, #28]
      break;
 80034c0:	e023      	b.n	800350a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fabb 	bl	8003a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	021a      	lsls	r2, r3, #8
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	61da      	str	r2, [r3, #28]
      break;
 8003502:	e002      	b.n	800350a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
      break;
 8003508:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIM_ConfigClockSource+0x1c>
 8003534:	2302      	movs	r3, #2
 8003536:	e0b4      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x186>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800355e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003570:	d03e      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003576:	f200 8087 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357e:	f000 8086 	beq.w	800368e <HAL_TIM_ConfigClockSource+0x172>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	d87f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 8003588:	2b70      	cmp	r3, #112	@ 0x70
 800358a:	d01a      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0xa6>
 800358c:	2b70      	cmp	r3, #112	@ 0x70
 800358e:	d87b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 8003590:	2b60      	cmp	r3, #96	@ 0x60
 8003592:	d050      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x11a>
 8003594:	2b60      	cmp	r3, #96	@ 0x60
 8003596:	d877      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 8003598:	2b50      	cmp	r3, #80	@ 0x50
 800359a:	d03c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xfa>
 800359c:	2b50      	cmp	r3, #80	@ 0x50
 800359e:	d873      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	d058      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x13a>
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d86f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b30      	cmp	r3, #48	@ 0x30
 80035aa:	d064      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15a>
 80035ac:	2b30      	cmp	r3, #48	@ 0x30
 80035ae:	d86b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d060      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15a>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d867      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d05c      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d05a      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	e062      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035d2:	f000 fafc 	bl	8003bce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]
      break;
 80035ee:	e04f      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003600:	f000 fae5 	bl	8003bce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e03c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003622:	461a      	mov	r2, r3
 8003624:	f000 fa5c 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2150      	movs	r1, #80	@ 0x50
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fab3 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 8003634:	e02c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fa7a 	bl	8003b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2160      	movs	r1, #96	@ 0x60
 800364e:	4618      	mov	r0, r3
 8003650:	f000 faa3 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 8003654:	e01c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fa3c 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2140      	movs	r1, #64	@ 0x40
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fa93 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 8003674:	e00c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fa8a 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 8003686:	e003      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e000      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
	...

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2f      	ldr	r2, [pc, #188]	@ (80037c4 <TIM_Base_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <TIM_Base_SetConfig+0xd4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <TIM_Base_SetConfig+0xd8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a22      	ldr	r2, [pc, #136]	@ (80037c4 <TIM_Base_SetConfig+0xd0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <TIM_Base_SetConfig+0xd4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1e      	ldr	r2, [pc, #120]	@ (80037cc <TIM_Base_SetConfig+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <TIM_Base_SetConfig+0xd0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f023 0201 	bic.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	611a      	str	r2, [r3, #16]
  }
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800

080037d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f023 0201 	bic.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f023 0302 	bic.w	r3, r3, #2
 8003818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <TIM_OC1_SetConfig+0xc8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10c      	bne.n	8003846 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0308 	bic.w	r3, r3, #8
 8003832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a13      	ldr	r2, [pc, #76]	@ (8003898 <TIM_OC1_SetConfig+0xc8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d111      	bne.n	8003872 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00

0800389c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f023 0210 	bic.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0320 	bic.w	r3, r3, #32
 80038e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <TIM_OC2_SetConfig+0xd0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10d      	bne.n	8003918 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a14      	ldr	r2, [pc, #80]	@ (800396c <TIM_OC2_SetConfig+0xd0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d113      	bne.n	8003948 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800392e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00

08003970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <TIM_OC3_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10d      	bne.n	80039ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <TIM_OC3_SetConfig+0xd0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d113      	bne.n	8003a1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00

08003a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <TIM_OC4_SetConfig+0x98>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 030a 	bic.w	r3, r3, #10
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0210 	bic.w	r2, r3, #16
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	031b      	lsls	r3, r3, #12
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f043 0307 	orr.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003be8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2201      	movs	r2, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	401a      	ands	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1a      	ldr	r2, [r3, #32]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e046      	b.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00e      	beq.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb8:	d009      	beq.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a10      	ldr	r2, [pc, #64]	@ (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800

08003d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e042      	b.n	8003dcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc ffc2 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	@ 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fdb7 	bl	80048ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	@ 0x28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d175      	bne.n	8003ee0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_UART_Transmit+0x2c>
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e06e      	b.n	8003ee2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2221      	movs	r2, #33	@ 0x21
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e12:	f7fd f8bf 	bl	8000f94 <HAL_GetTick>
 8003e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2c:	d108      	bne.n	8003e40 <HAL_UART_Transmit+0x6c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e003      	b.n	8003e48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e48:	e02e      	b.n	8003ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2180      	movs	r1, #128	@ 0x80
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fb1c 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e03a      	b.n	8003ee2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3302      	adds	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e007      	b.n	8003e9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	3301      	adds	r3, #1
 8003e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1cb      	bne.n	8003e4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2140      	movs	r1, #64	@ 0x40
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fae8 	bl	8004492 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d112      	bne.n	8003f2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_UART_Receive_IT+0x26>
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e00b      	b.n	8003f2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fb0f 	bl	8004544 <UART_Start_Receive_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	e000      	b.n	8003f2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
  }
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0ba      	sub	sp, #232	@ 0xe8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_UART_IRQHandler+0x66>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fbec 	bl	8004770 <UART_Receive_IT>
      return;
 8003f98:	e25b      	b.n	8004452 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80de 	beq.w	8004160 <HAL_UART_IRQHandler+0x22c>
 8003fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80d1 	beq.w	8004160 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xae>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_UART_IRQHandler+0xd2>
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_UART_IRQHandler+0xf6>
 8004012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <HAL_UART_IRQHandler+0x126>
 8004036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f043 0208 	orr.w	r2, r3, #8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 81f2 	beq.w	8004448 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_UART_IRQHandler+0x14e>
 8004070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fb77 	bl	8004770 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_UART_IRQHandler+0x17a>
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04f      	beq.n	800414e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa81 	bl	80045b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d041      	beq.n	8004146 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1d9      	bne.n	80040c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d013      	beq.n	800413e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411a:	4a7e      	ldr	r2, [pc, #504]	@ (8004314 <HAL_UART_IRQHandler+0x3e0>)
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fe6e 	bl	8001e04 <HAL_DMA_Abort_IT>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d016      	beq.n	800415c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004138:	4610      	mov	r0, r2
 800413a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e00e      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f993 	bl	800446a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00a      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f98f 	bl	800446a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e006      	b.n	800415c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f98b 	bl	800446a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800415a:	e175      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	bf00      	nop
    return;
 800415e:	e173      	b.n	8004448 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 814f 	bne.w	8004408 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8148 	beq.w	8004408 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8141 	beq.w	8004408 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80b6 	beq.w	8004318 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8145 	beq.w	800444c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ca:	429a      	cmp	r2, r3
 80041cc:	f080 813e 	bcs.w	800444c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b20      	cmp	r3, #32
 80041e0:	f000 8088 	beq.w	80042f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004210:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004214:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800421c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1d9      	bne.n	80041e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004240:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004254:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004258:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800425c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004260:	e841 2300 	strex	r3, r2, [r1]
 8004264:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004266:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e1      	bne.n	8004230 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3314      	adds	r3, #20
 8004272:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800427c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800427e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004290:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004292:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004296:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800429e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e3      	bne.n	800426c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042c4:	f023 0310 	bic.w	r3, r3, #16
 80042c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042d8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd fd4d 	bl	8001d8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004302:	b29b      	uxth	r3, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8b6 	bl	800447c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004310:	e09c      	b.n	800444c <HAL_UART_IRQHandler+0x518>
 8004312:	bf00      	nop
 8004314:	0800467b 	.word	0x0800467b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 808e 	beq.w	8004450 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8089 	beq.w	8004450 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004354:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004362:	647a      	str	r2, [r7, #68]	@ 0x44
 8004364:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	623b      	str	r3, [r7, #32]
   return(result);
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3314      	adds	r3, #20
 8004396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800439a:	633a      	str	r2, [r7, #48]	@ 0x30
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e3      	bne.n	8004376 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0310 	bic.w	r3, r3, #16
 80043d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043e0:	61fa      	str	r2, [r7, #28]
 80043e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	617b      	str	r3, [r7, #20]
   return(result);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e3      	bne.n	80043bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f83b 	bl	800447c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004406:	e023      	b.n	8004450 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <HAL_UART_IRQHandler+0x4f4>
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f93e 	bl	80046a2 <UART_Transmit_IT>
    return;
 8004426:	e014      	b.n	8004452 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00e      	beq.n	8004452 <HAL_UART_IRQHandler+0x51e>
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f97d 	bl	8004740 <UART_EndTransmit_IT>
    return;
 8004446:	e004      	b.n	8004452 <HAL_UART_IRQHandler+0x51e>
    return;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <HAL_UART_IRQHandler+0x51e>
      return;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_UART_IRQHandler+0x51e>
      return;
 8004450:	bf00      	nop
  }
}
 8004452:	37e8      	adds	r7, #232	@ 0xe8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr

0800446a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a2:	e03b      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d037      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fc fd72 	bl	8000f94 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	6a3a      	ldr	r2, [r7, #32]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e03a      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d023      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b80      	cmp	r3, #128	@ 0x80
 80044d8:	d020      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b40      	cmp	r3, #64	@ 0x40
 80044de:	d01d      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d116      	bne.n	800451c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f856 	bl	80045b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2208      	movs	r2, #8
 800450e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e00f      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	429a      	cmp	r2, r3
 8004538:	d0b4      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2222      	movs	r2, #34	@ 0x22
 800456e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004588:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0220 	orr.w	r2, r2, #32
 80045a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b095      	sub	sp, #84	@ 0x54
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	330c      	adds	r3, #12
 80045dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045de:	643a      	str	r2, [r7, #64]	@ 0x40
 80045e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	61fb      	str	r3, [r7, #28]
   return(result);
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3314      	adds	r3, #20
 8004610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	2b01      	cmp	r3, #1
 800462c:	d119      	bne.n	8004662 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	60bb      	str	r3, [r7, #8]
   return(result);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f023 0310 	bic.w	r3, r3, #16
 8004644:	647b      	str	r3, [r7, #68]	@ 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800464e:	61ba      	str	r2, [r7, #24]
 8004650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	613b      	str	r3, [r7, #16]
   return(result);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004670:	bf00      	nop
 8004672:	3754      	adds	r7, #84	@ 0x54
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fee8 	bl	800446a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b21      	cmp	r3, #33	@ 0x21
 80046b4:	d13e      	bne.n	8004734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046be:	d114      	bne.n	80046ea <UART_Transmit_IT+0x48>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d110      	bne.n	80046ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]
 80046e8:	e008      	b.n	80046fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	1c59      	adds	r1, r3, #1
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6211      	str	r1, [r2, #32]
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29b      	uxth	r3, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4619      	mov	r1, r3
 800470a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10f      	bne.n	8004730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800471e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800472e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004756:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fe79 	bl	8004458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08c      	sub	sp, #48	@ 0x30
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b22      	cmp	r3, #34	@ 0x22
 8004782:	f040 80ae 	bne.w	80048e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800478e:	d117      	bne.n	80047c0 <UART_Receive_IT+0x50>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d113      	bne.n	80047c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80047be:	e026      	b.n	800480e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d2:	d007      	beq.n	80047e4 <UART_Receive_IT+0x74>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <UART_Receive_IT+0x82>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e008      	b.n	8004804 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004802:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4619      	mov	r1, r3
 800481c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800481e:	2b00      	cmp	r3, #0
 8004820:	d15d      	bne.n	80048de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0220 	bic.w	r2, r2, #32
 8004830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004840:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b01      	cmp	r3, #1
 8004866:	d135      	bne.n	80048d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	613b      	str	r3, [r7, #16]
   return(result);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800488e:	623a      	str	r2, [r7, #32]
 8004890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	69f9      	ldr	r1, [r7, #28]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	61bb      	str	r3, [r7, #24]
   return(result);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e5      	bne.n	800486e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d10a      	bne.n	80048c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fdd5 	bl	800447c <HAL_UARTEx_RxEventCallback>
 80048d2:	e002      	b.n	80048da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fb ffad 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e002      	b.n	80048e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3730      	adds	r7, #48	@ 0x30
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004926:	f023 030c 	bic.w	r3, r3, #12
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	430b      	orrs	r3, r1
 8004932:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <UART_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fe f848 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	e002      	b.n	8004962 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe f830 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8004960:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	4a22      	ldr	r2, [pc, #136]	@ (8004a04 <UART_SetConfig+0x118>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	0119      	lsls	r1, r3, #4
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <UART_SetConfig+0x118>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	@ 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	@ 0x32
 80049ac:	4a15      	ldr	r2, [pc, #84]	@ (8004a04 <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b8:	4419      	add	r1, r3
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <UART_SetConfig+0x118>)
 80049d2:	fba3 0302 	umull	r0, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2064      	movs	r0, #100	@ 0x64
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	@ 0x32
 80049e4:	4a07      	ldr	r2, [pc, #28]	@ (8004a04 <UART_SetConfig+0x118>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	440a      	add	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40013800 	.word	0x40013800
 8004a04:	51eb851f 	.word	0x51eb851f

08004a08 <sniprintf>:
 8004a08:	b40c      	push	{r2, r3}
 8004a0a:	b530      	push	{r4, r5, lr}
 8004a0c:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <sniprintf+0x64>)
 8004a0e:	1e0c      	subs	r4, r1, #0
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	b09d      	sub	sp, #116	@ 0x74
 8004a14:	da08      	bge.n	8004a28 <sniprintf+0x20>
 8004a16:	238b      	movs	r3, #139	@ 0x8b
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	b01d      	add	sp, #116	@ 0x74
 8004a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a24:	b002      	add	sp, #8
 8004a26:	4770      	bx	lr
 8004a28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a30:	bf0c      	ite	eq
 8004a32:	4623      	moveq	r3, r4
 8004a34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a40:	9002      	str	r0, [sp, #8]
 8004a42:	9006      	str	r0, [sp, #24]
 8004a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a48:	4628      	mov	r0, r5
 8004a4a:	ab21      	add	r3, sp, #132	@ 0x84
 8004a4c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a4e:	a902      	add	r1, sp, #8
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	f000 f993 	bl	8004d7c <_svfiprintf_r>
 8004a56:	1c43      	adds	r3, r0, #1
 8004a58:	bfbc      	itt	lt
 8004a5a:	238b      	movlt	r3, #139	@ 0x8b
 8004a5c:	602b      	strlt	r3, [r5, #0]
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	d0dd      	beq.n	8004a1e <sniprintf+0x16>
 8004a62:	2200      	movs	r2, #0
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e7d9      	b.n	8004a1e <sniprintf+0x16>
 8004a6a:	bf00      	nop
 8004a6c:	20000014 	.word	0x20000014

08004a70 <memset>:
 8004a70:	4603      	mov	r3, r0
 8004a72:	4402      	add	r2, r0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d100      	bne.n	8004a7a <memset+0xa>
 8004a78:	4770      	bx	lr
 8004a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7e:	e7f9      	b.n	8004a74 <memset+0x4>

08004a80 <__errno>:
 8004a80:	4b01      	ldr	r3, [pc, #4]	@ (8004a88 <__errno+0x8>)
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000014 	.word	0x20000014

08004a8c <__libc_init_array>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	2600      	movs	r6, #0
 8004a90:	4d0c      	ldr	r5, [pc, #48]	@ (8004ac4 <__libc_init_array+0x38>)
 8004a92:	4c0d      	ldr	r4, [pc, #52]	@ (8004ac8 <__libc_init_array+0x3c>)
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	42a6      	cmp	r6, r4
 8004a9a:	d109      	bne.n	8004ab0 <__libc_init_array+0x24>
 8004a9c:	f000 fc78 	bl	8005390 <_init>
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	4d0a      	ldr	r5, [pc, #40]	@ (8004acc <__libc_init_array+0x40>)
 8004aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8004ad0 <__libc_init_array+0x44>)
 8004aa6:	1b64      	subs	r4, r4, r5
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	42a6      	cmp	r6, r4
 8004aac:	d105      	bne.n	8004aba <__libc_init_array+0x2e>
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab4:	4798      	blx	r3
 8004ab6:	3601      	adds	r6, #1
 8004ab8:	e7ee      	b.n	8004a98 <__libc_init_array+0xc>
 8004aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abe:	4798      	blx	r3
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	e7f2      	b.n	8004aaa <__libc_init_array+0x1e>
 8004ac4:	0800543c 	.word	0x0800543c
 8004ac8:	0800543c 	.word	0x0800543c
 8004acc:	0800543c 	.word	0x0800543c
 8004ad0:	08005440 	.word	0x08005440

08004ad4 <__retarget_lock_acquire_recursive>:
 8004ad4:	4770      	bx	lr

08004ad6 <__retarget_lock_release_recursive>:
 8004ad6:	4770      	bx	lr

08004ad8 <_free_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4605      	mov	r5, r0
 8004adc:	2900      	cmp	r1, #0
 8004ade:	d040      	beq.n	8004b62 <_free_r+0x8a>
 8004ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae4:	1f0c      	subs	r4, r1, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfb8      	it	lt
 8004aea:	18e4      	addlt	r4, r4, r3
 8004aec:	f000 f8de 	bl	8004cac <__malloc_lock>
 8004af0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <_free_r+0x8c>)
 8004af2:	6813      	ldr	r3, [r2, #0]
 8004af4:	b933      	cbnz	r3, 8004b04 <_free_r+0x2c>
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	6014      	str	r4, [r2, #0]
 8004afa:	4628      	mov	r0, r5
 8004afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b00:	f000 b8da 	b.w	8004cb8 <__malloc_unlock>
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	d908      	bls.n	8004b1a <_free_r+0x42>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	1821      	adds	r1, r4, r0
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	bf01      	itttt	eq
 8004b10:	6819      	ldreq	r1, [r3, #0]
 8004b12:	685b      	ldreq	r3, [r3, #4]
 8004b14:	1809      	addeq	r1, r1, r0
 8004b16:	6021      	streq	r1, [r4, #0]
 8004b18:	e7ed      	b.n	8004af6 <_free_r+0x1e>
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b10b      	cbz	r3, 8004b24 <_free_r+0x4c>
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d9fa      	bls.n	8004b1a <_free_r+0x42>
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	1850      	adds	r0, r2, r1
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d10b      	bne.n	8004b44 <_free_r+0x6c>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	4401      	add	r1, r0
 8004b30:	1850      	adds	r0, r2, r1
 8004b32:	4283      	cmp	r3, r0
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	d1e0      	bne.n	8004afa <_free_r+0x22>
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4408      	add	r0, r1
 8004b3e:	6010      	str	r0, [r2, #0]
 8004b40:	6053      	str	r3, [r2, #4]
 8004b42:	e7da      	b.n	8004afa <_free_r+0x22>
 8004b44:	d902      	bls.n	8004b4c <_free_r+0x74>
 8004b46:	230c      	movs	r3, #12
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	e7d6      	b.n	8004afa <_free_r+0x22>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	1821      	adds	r1, r4, r0
 8004b50:	428b      	cmp	r3, r1
 8004b52:	bf01      	itttt	eq
 8004b54:	6819      	ldreq	r1, [r3, #0]
 8004b56:	685b      	ldreq	r3, [r3, #4]
 8004b58:	1809      	addeq	r1, r1, r0
 8004b5a:	6021      	streq	r1, [r4, #0]
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6054      	str	r4, [r2, #4]
 8004b60:	e7cb      	b.n	8004afa <_free_r+0x22>
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20000430 	.word	0x20000430

08004b68 <sbrk_aligned>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ba8 <sbrk_aligned+0x40>)
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	6831      	ldr	r1, [r6, #0]
 8004b70:	4605      	mov	r5, r0
 8004b72:	b911      	cbnz	r1, 8004b7a <sbrk_aligned+0x12>
 8004b74:	f000 fbaa 	bl	80052cc <_sbrk_r>
 8004b78:	6030      	str	r0, [r6, #0]
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f000 fba5 	bl	80052cc <_sbrk_r>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	d103      	bne.n	8004b8e <sbrk_aligned+0x26>
 8004b86:	f04f 34ff 	mov.w	r4, #4294967295
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	1cc4      	adds	r4, r0, #3
 8004b90:	f024 0403 	bic.w	r4, r4, #3
 8004b94:	42a0      	cmp	r0, r4
 8004b96:	d0f8      	beq.n	8004b8a <sbrk_aligned+0x22>
 8004b98:	1a21      	subs	r1, r4, r0
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 fb96 	bl	80052cc <_sbrk_r>
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d1f2      	bne.n	8004b8a <sbrk_aligned+0x22>
 8004ba4:	e7ef      	b.n	8004b86 <sbrk_aligned+0x1e>
 8004ba6:	bf00      	nop
 8004ba8:	2000042c 	.word	0x2000042c

08004bac <_malloc_r>:
 8004bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb0:	1ccd      	adds	r5, r1, #3
 8004bb2:	f025 0503 	bic.w	r5, r5, #3
 8004bb6:	3508      	adds	r5, #8
 8004bb8:	2d0c      	cmp	r5, #12
 8004bba:	bf38      	it	cc
 8004bbc:	250c      	movcc	r5, #12
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	db01      	blt.n	8004bc8 <_malloc_r+0x1c>
 8004bc4:	42a9      	cmp	r1, r5
 8004bc6:	d904      	bls.n	8004bd2 <_malloc_r+0x26>
 8004bc8:	230c      	movs	r3, #12
 8004bca:	6033      	str	r3, [r6, #0]
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ca8 <_malloc_r+0xfc>
 8004bd6:	f000 f869 	bl	8004cac <__malloc_lock>
 8004bda:	f8d8 3000 	ldr.w	r3, [r8]
 8004bde:	461c      	mov	r4, r3
 8004be0:	bb44      	cbnz	r4, 8004c34 <_malloc_r+0x88>
 8004be2:	4629      	mov	r1, r5
 8004be4:	4630      	mov	r0, r6
 8004be6:	f7ff ffbf 	bl	8004b68 <sbrk_aligned>
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	4604      	mov	r4, r0
 8004bee:	d158      	bne.n	8004ca2 <_malloc_r+0xf6>
 8004bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8004bf4:	4627      	mov	r7, r4
 8004bf6:	2f00      	cmp	r7, #0
 8004bf8:	d143      	bne.n	8004c82 <_malloc_r+0xd6>
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d04b      	beq.n	8004c96 <_malloc_r+0xea>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	4639      	mov	r1, r7
 8004c02:	4630      	mov	r0, r6
 8004c04:	eb04 0903 	add.w	r9, r4, r3
 8004c08:	f000 fb60 	bl	80052cc <_sbrk_r>
 8004c0c:	4581      	cmp	r9, r0
 8004c0e:	d142      	bne.n	8004c96 <_malloc_r+0xea>
 8004c10:	6821      	ldr	r1, [r4, #0]
 8004c12:	4630      	mov	r0, r6
 8004c14:	1a6d      	subs	r5, r5, r1
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7ff ffa6 	bl	8004b68 <sbrk_aligned>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d03a      	beq.n	8004c96 <_malloc_r+0xea>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	442b      	add	r3, r5
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	f8d8 3000 	ldr.w	r3, [r8]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	bb62      	cbnz	r2, 8004c88 <_malloc_r+0xdc>
 8004c2e:	f8c8 7000 	str.w	r7, [r8]
 8004c32:	e00f      	b.n	8004c54 <_malloc_r+0xa8>
 8004c34:	6822      	ldr	r2, [r4, #0]
 8004c36:	1b52      	subs	r2, r2, r5
 8004c38:	d420      	bmi.n	8004c7c <_malloc_r+0xd0>
 8004c3a:	2a0b      	cmp	r2, #11
 8004c3c:	d917      	bls.n	8004c6e <_malloc_r+0xc2>
 8004c3e:	1961      	adds	r1, r4, r5
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	6025      	str	r5, [r4, #0]
 8004c44:	bf18      	it	ne
 8004c46:	6059      	strne	r1, [r3, #4]
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	bf08      	it	eq
 8004c4c:	f8c8 1000 	streq.w	r1, [r8]
 8004c50:	5162      	str	r2, [r4, r5]
 8004c52:	604b      	str	r3, [r1, #4]
 8004c54:	4630      	mov	r0, r6
 8004c56:	f000 f82f 	bl	8004cb8 <__malloc_unlock>
 8004c5a:	f104 000b 	add.w	r0, r4, #11
 8004c5e:	1d23      	adds	r3, r4, #4
 8004c60:	f020 0007 	bic.w	r0, r0, #7
 8004c64:	1ac2      	subs	r2, r0, r3
 8004c66:	bf1c      	itt	ne
 8004c68:	1a1b      	subne	r3, r3, r0
 8004c6a:	50a3      	strne	r3, [r4, r2]
 8004c6c:	e7af      	b.n	8004bce <_malloc_r+0x22>
 8004c6e:	6862      	ldr	r2, [r4, #4]
 8004c70:	42a3      	cmp	r3, r4
 8004c72:	bf0c      	ite	eq
 8004c74:	f8c8 2000 	streq.w	r2, [r8]
 8004c78:	605a      	strne	r2, [r3, #4]
 8004c7a:	e7eb      	b.n	8004c54 <_malloc_r+0xa8>
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	6864      	ldr	r4, [r4, #4]
 8004c80:	e7ae      	b.n	8004be0 <_malloc_r+0x34>
 8004c82:	463c      	mov	r4, r7
 8004c84:	687f      	ldr	r7, [r7, #4]
 8004c86:	e7b6      	b.n	8004bf6 <_malloc_r+0x4a>
 8004c88:	461a      	mov	r2, r3
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	d1fb      	bne.n	8004c88 <_malloc_r+0xdc>
 8004c90:	2300      	movs	r3, #0
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	e7de      	b.n	8004c54 <_malloc_r+0xa8>
 8004c96:	230c      	movs	r3, #12
 8004c98:	4630      	mov	r0, r6
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	f000 f80c 	bl	8004cb8 <__malloc_unlock>
 8004ca0:	e794      	b.n	8004bcc <_malloc_r+0x20>
 8004ca2:	6005      	str	r5, [r0, #0]
 8004ca4:	e7d6      	b.n	8004c54 <_malloc_r+0xa8>
 8004ca6:	bf00      	nop
 8004ca8:	20000430 	.word	0x20000430

08004cac <__malloc_lock>:
 8004cac:	4801      	ldr	r0, [pc, #4]	@ (8004cb4 <__malloc_lock+0x8>)
 8004cae:	f7ff bf11 	b.w	8004ad4 <__retarget_lock_acquire_recursive>
 8004cb2:	bf00      	nop
 8004cb4:	20000428 	.word	0x20000428

08004cb8 <__malloc_unlock>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	@ (8004cc0 <__malloc_unlock+0x8>)
 8004cba:	f7ff bf0c 	b.w	8004ad6 <__retarget_lock_release_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	20000428 	.word	0x20000428

08004cc4 <__ssputs_r>:
 8004cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc8:	461f      	mov	r7, r3
 8004cca:	688e      	ldr	r6, [r1, #8]
 8004ccc:	4682      	mov	sl, r0
 8004cce:	42be      	cmp	r6, r7
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	680b      	ldr	r3, [r1, #0]
 8004cd6:	d82d      	bhi.n	8004d34 <__ssputs_r+0x70>
 8004cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ce0:	d026      	beq.n	8004d30 <__ssputs_r+0x6c>
 8004ce2:	6965      	ldr	r5, [r4, #20]
 8004ce4:	6909      	ldr	r1, [r1, #16]
 8004ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cea:	eba3 0901 	sub.w	r9, r3, r1
 8004cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cf2:	1c7b      	adds	r3, r7, #1
 8004cf4:	444b      	add	r3, r9
 8004cf6:	106d      	asrs	r5, r5, #1
 8004cf8:	429d      	cmp	r5, r3
 8004cfa:	bf38      	it	cc
 8004cfc:	461d      	movcc	r5, r3
 8004cfe:	0553      	lsls	r3, r2, #21
 8004d00:	d527      	bpl.n	8004d52 <__ssputs_r+0x8e>
 8004d02:	4629      	mov	r1, r5
 8004d04:	f7ff ff52 	bl	8004bac <_malloc_r>
 8004d08:	4606      	mov	r6, r0
 8004d0a:	b360      	cbz	r0, 8004d66 <__ssputs_r+0xa2>
 8004d0c:	464a      	mov	r2, r9
 8004d0e:	6921      	ldr	r1, [r4, #16]
 8004d10:	f000 fafa 	bl	8005308 <memcpy>
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	6126      	str	r6, [r4, #16]
 8004d22:	444e      	add	r6, r9
 8004d24:	6026      	str	r6, [r4, #0]
 8004d26:	463e      	mov	r6, r7
 8004d28:	6165      	str	r5, [r4, #20]
 8004d2a:	eba5 0509 	sub.w	r5, r5, r9
 8004d2e:	60a5      	str	r5, [r4, #8]
 8004d30:	42be      	cmp	r6, r7
 8004d32:	d900      	bls.n	8004d36 <__ssputs_r+0x72>
 8004d34:	463e      	mov	r6, r7
 8004d36:	4632      	mov	r2, r6
 8004d38:	4641      	mov	r1, r8
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	f000 faac 	bl	8005298 <memmove>
 8004d40:	2000      	movs	r0, #0
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	60a3      	str	r3, [r4, #8]
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	4433      	add	r3, r6
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d52:	462a      	mov	r2, r5
 8004d54:	f000 fae6 	bl	8005324 <_realloc_r>
 8004d58:	4606      	mov	r6, r0
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	d1e0      	bne.n	8004d20 <__ssputs_r+0x5c>
 8004d5e:	4650      	mov	r0, sl
 8004d60:	6921      	ldr	r1, [r4, #16]
 8004d62:	f7ff feb9 	bl	8004ad8 <_free_r>
 8004d66:	230c      	movs	r3, #12
 8004d68:	f8ca 3000 	str.w	r3, [sl]
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	e7e9      	b.n	8004d4e <__ssputs_r+0x8a>
	...

08004d7c <_svfiprintf_r>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	4698      	mov	r8, r3
 8004d82:	898b      	ldrh	r3, [r1, #12]
 8004d84:	4607      	mov	r7, r0
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	460d      	mov	r5, r1
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	b09d      	sub	sp, #116	@ 0x74
 8004d8e:	d510      	bpl.n	8004db2 <_svfiprintf_r+0x36>
 8004d90:	690b      	ldr	r3, [r1, #16]
 8004d92:	b973      	cbnz	r3, 8004db2 <_svfiprintf_r+0x36>
 8004d94:	2140      	movs	r1, #64	@ 0x40
 8004d96:	f7ff ff09 	bl	8004bac <_malloc_r>
 8004d9a:	6028      	str	r0, [r5, #0]
 8004d9c:	6128      	str	r0, [r5, #16]
 8004d9e:	b930      	cbnz	r0, 8004dae <_svfiprintf_r+0x32>
 8004da0:	230c      	movs	r3, #12
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	b01d      	add	sp, #116	@ 0x74
 8004daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dae:	2340      	movs	r3, #64	@ 0x40
 8004db0:	616b      	str	r3, [r5, #20]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db6:	2320      	movs	r3, #32
 8004db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dbc:	2330      	movs	r3, #48	@ 0x30
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004f60 <_svfiprintf_r+0x1e4>
 8004dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dce:	4623      	mov	r3, r4
 8004dd0:	469a      	mov	sl, r3
 8004dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd6:	b10a      	cbz	r2, 8004ddc <_svfiprintf_r+0x60>
 8004dd8:	2a25      	cmp	r2, #37	@ 0x25
 8004dda:	d1f9      	bne.n	8004dd0 <_svfiprintf_r+0x54>
 8004ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8004de0:	d00b      	beq.n	8004dfa <_svfiprintf_r+0x7e>
 8004de2:	465b      	mov	r3, fp
 8004de4:	4622      	mov	r2, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff ff6b 	bl	8004cc4 <__ssputs_r>
 8004dee:	3001      	adds	r0, #1
 8004df0:	f000 80a7 	beq.w	8004f42 <_svfiprintf_r+0x1c6>
 8004df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df6:	445a      	add	r2, fp
 8004df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 809f 	beq.w	8004f42 <_svfiprintf_r+0x1c6>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0e:	f10a 0a01 	add.w	sl, sl, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	9307      	str	r3, [sp, #28]
 8004e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e1c:	4654      	mov	r4, sl
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e24:	484e      	ldr	r0, [pc, #312]	@ (8004f60 <_svfiprintf_r+0x1e4>)
 8004e26:	f000 fa61 	bl	80052ec <memchr>
 8004e2a:	9a04      	ldr	r2, [sp, #16]
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_svfiprintf_r+0xea>
 8004e2e:	06d0      	lsls	r0, r2, #27
 8004e30:	bf44      	itt	mi
 8004e32:	2320      	movmi	r3, #32
 8004e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e38:	0711      	lsls	r1, r2, #28
 8004e3a:	bf44      	itt	mi
 8004e3c:	232b      	movmi	r3, #43	@ 0x2b
 8004e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e42:	f89a 3000 	ldrb.w	r3, [sl]
 8004e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e48:	d015      	beq.n	8004e76 <_svfiprintf_r+0xfa>
 8004e4a:	4654      	mov	r4, sl
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	9a07      	ldr	r2, [sp, #28]
 8004e54:	4621      	mov	r1, r4
 8004e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5a:	3b30      	subs	r3, #48	@ 0x30
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	d94b      	bls.n	8004ef8 <_svfiprintf_r+0x17c>
 8004e60:	b1b0      	cbz	r0, 8004e90 <_svfiprintf_r+0x114>
 8004e62:	9207      	str	r2, [sp, #28]
 8004e64:	e014      	b.n	8004e90 <_svfiprintf_r+0x114>
 8004e66:	eba0 0308 	sub.w	r3, r0, r8
 8004e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	46a2      	mov	sl, r4
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	e7d2      	b.n	8004e1c <_svfiprintf_r+0xa0>
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	9103      	str	r1, [sp, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbb      	ittet	lt
 8004e82:	425b      	neglt	r3, r3
 8004e84:	f042 0202 	orrlt.w	r2, r2, #2
 8004e88:	9307      	strge	r3, [sp, #28]
 8004e8a:	9307      	strlt	r3, [sp, #28]
 8004e8c:	bfb8      	it	lt
 8004e8e:	9204      	strlt	r2, [sp, #16]
 8004e90:	7823      	ldrb	r3, [r4, #0]
 8004e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e94:	d10a      	bne.n	8004eac <_svfiprintf_r+0x130>
 8004e96:	7863      	ldrb	r3, [r4, #1]
 8004e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e9a:	d132      	bne.n	8004f02 <_svfiprintf_r+0x186>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	3402      	adds	r4, #2
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	9203      	str	r2, [sp, #12]
 8004ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004eaa:	9305      	str	r3, [sp, #20]
 8004eac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004f64 <_svfiprintf_r+0x1e8>
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	7821      	ldrb	r1, [r4, #0]
 8004eb6:	f000 fa19 	bl	80052ec <memchr>
 8004eba:	b138      	cbz	r0, 8004ecc <_svfiprintf_r+0x150>
 8004ebc:	2240      	movs	r2, #64	@ 0x40
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	eba0 000a 	sub.w	r0, r0, sl
 8004ec4:	4082      	lsls	r2, r0
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	3401      	adds	r4, #1
 8004eca:	9304      	str	r3, [sp, #16]
 8004ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	4825      	ldr	r0, [pc, #148]	@ (8004f68 <_svfiprintf_r+0x1ec>)
 8004ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ed8:	f000 fa08 	bl	80052ec <memchr>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d036      	beq.n	8004f4e <_svfiprintf_r+0x1d2>
 8004ee0:	4b22      	ldr	r3, [pc, #136]	@ (8004f6c <_svfiprintf_r+0x1f0>)
 8004ee2:	bb1b      	cbnz	r3, 8004f2c <_svfiprintf_r+0x1b0>
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	f023 0307 	bic.w	r3, r3, #7
 8004eec:	3308      	adds	r3, #8
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef2:	4433      	add	r3, r6
 8004ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ef6:	e76a      	b.n	8004dce <_svfiprintf_r+0x52>
 8004ef8:	460c      	mov	r4, r1
 8004efa:	2001      	movs	r0, #1
 8004efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f00:	e7a8      	b.n	8004e54 <_svfiprintf_r+0xd8>
 8004f02:	2300      	movs	r3, #0
 8004f04:	f04f 0c0a 	mov.w	ip, #10
 8004f08:	4619      	mov	r1, r3
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f14:	3a30      	subs	r2, #48	@ 0x30
 8004f16:	2a09      	cmp	r2, #9
 8004f18:	d903      	bls.n	8004f22 <_svfiprintf_r+0x1a6>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0c6      	beq.n	8004eac <_svfiprintf_r+0x130>
 8004f1e:	9105      	str	r1, [sp, #20]
 8004f20:	e7c4      	b.n	8004eac <_svfiprintf_r+0x130>
 8004f22:	4604      	mov	r4, r0
 8004f24:	2301      	movs	r3, #1
 8004f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f2a:	e7f0      	b.n	8004f0e <_svfiprintf_r+0x192>
 8004f2c:	ab03      	add	r3, sp, #12
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	462a      	mov	r2, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <_svfiprintf_r+0x1f4>)
 8004f36:	a904      	add	r1, sp, #16
 8004f38:	f3af 8000 	nop.w
 8004f3c:	1c42      	adds	r2, r0, #1
 8004f3e:	4606      	mov	r6, r0
 8004f40:	d1d6      	bne.n	8004ef0 <_svfiprintf_r+0x174>
 8004f42:	89ab      	ldrh	r3, [r5, #12]
 8004f44:	065b      	lsls	r3, r3, #25
 8004f46:	f53f af2d 	bmi.w	8004da4 <_svfiprintf_r+0x28>
 8004f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f4c:	e72c      	b.n	8004da8 <_svfiprintf_r+0x2c>
 8004f4e:	ab03      	add	r3, sp, #12
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	462a      	mov	r2, r5
 8004f54:	4638      	mov	r0, r7
 8004f56:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <_svfiprintf_r+0x1f4>)
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	f000 f87d 	bl	8005058 <_printf_i>
 8004f5e:	e7ed      	b.n	8004f3c <_svfiprintf_r+0x1c0>
 8004f60:	08005406 	.word	0x08005406
 8004f64:	0800540c 	.word	0x0800540c
 8004f68:	08005410 	.word	0x08005410
 8004f6c:	00000000 	.word	0x00000000
 8004f70:	08004cc5 	.word	0x08004cc5

08004f74 <_printf_common>:
 8004f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	4616      	mov	r6, r2
 8004f7a:	4698      	mov	r8, r3
 8004f7c:	688a      	ldr	r2, [r1, #8]
 8004f7e:	690b      	ldr	r3, [r1, #16]
 8004f80:	4607      	mov	r7, r0
 8004f82:	4293      	cmp	r3, r2
 8004f84:	bfb8      	it	lt
 8004f86:	4613      	movlt	r3, r2
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f8e:	460c      	mov	r4, r1
 8004f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f94:	b10a      	cbz	r2, 8004f9a <_printf_common+0x26>
 8004f96:	3301      	adds	r3, #1
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	0699      	lsls	r1, r3, #26
 8004f9e:	bf42      	ittt	mi
 8004fa0:	6833      	ldrmi	r3, [r6, #0]
 8004fa2:	3302      	addmi	r3, #2
 8004fa4:	6033      	strmi	r3, [r6, #0]
 8004fa6:	6825      	ldr	r5, [r4, #0]
 8004fa8:	f015 0506 	ands.w	r5, r5, #6
 8004fac:	d106      	bne.n	8004fbc <_printf_common+0x48>
 8004fae:	f104 0a19 	add.w	sl, r4, #25
 8004fb2:	68e3      	ldr	r3, [r4, #12]
 8004fb4:	6832      	ldr	r2, [r6, #0]
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	42ab      	cmp	r3, r5
 8004fba:	dc2b      	bgt.n	8005014 <_printf_common+0xa0>
 8004fbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fc0:	6822      	ldr	r2, [r4, #0]
 8004fc2:	3b00      	subs	r3, #0
 8004fc4:	bf18      	it	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	0692      	lsls	r2, r2, #26
 8004fca:	d430      	bmi.n	800502e <_printf_common+0xba>
 8004fcc:	4641      	mov	r1, r8
 8004fce:	4638      	mov	r0, r7
 8004fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fd4:	47c8      	blx	r9
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d023      	beq.n	8005022 <_printf_common+0xae>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	6922      	ldr	r2, [r4, #16]
 8004fde:	f003 0306 	and.w	r3, r3, #6
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	bf14      	ite	ne
 8004fe6:	2500      	movne	r5, #0
 8004fe8:	6833      	ldreq	r3, [r6, #0]
 8004fea:	f04f 0600 	mov.w	r6, #0
 8004fee:	bf08      	it	eq
 8004ff0:	68e5      	ldreq	r5, [r4, #12]
 8004ff2:	f104 041a 	add.w	r4, r4, #26
 8004ff6:	bf08      	it	eq
 8004ff8:	1aed      	subeq	r5, r5, r3
 8004ffa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004ffe:	bf08      	it	eq
 8005000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005004:	4293      	cmp	r3, r2
 8005006:	bfc4      	itt	gt
 8005008:	1a9b      	subgt	r3, r3, r2
 800500a:	18ed      	addgt	r5, r5, r3
 800500c:	42b5      	cmp	r5, r6
 800500e:	d11a      	bne.n	8005046 <_printf_common+0xd2>
 8005010:	2000      	movs	r0, #0
 8005012:	e008      	b.n	8005026 <_printf_common+0xb2>
 8005014:	2301      	movs	r3, #1
 8005016:	4652      	mov	r2, sl
 8005018:	4641      	mov	r1, r8
 800501a:	4638      	mov	r0, r7
 800501c:	47c8      	blx	r9
 800501e:	3001      	adds	r0, #1
 8005020:	d103      	bne.n	800502a <_printf_common+0xb6>
 8005022:	f04f 30ff 	mov.w	r0, #4294967295
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	3501      	adds	r5, #1
 800502c:	e7c1      	b.n	8004fb2 <_printf_common+0x3e>
 800502e:	2030      	movs	r0, #48	@ 0x30
 8005030:	18e1      	adds	r1, r4, r3
 8005032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800503c:	4422      	add	r2, r4
 800503e:	3302      	adds	r3, #2
 8005040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005044:	e7c2      	b.n	8004fcc <_printf_common+0x58>
 8005046:	2301      	movs	r3, #1
 8005048:	4622      	mov	r2, r4
 800504a:	4641      	mov	r1, r8
 800504c:	4638      	mov	r0, r7
 800504e:	47c8      	blx	r9
 8005050:	3001      	adds	r0, #1
 8005052:	d0e6      	beq.n	8005022 <_printf_common+0xae>
 8005054:	3601      	adds	r6, #1
 8005056:	e7d9      	b.n	800500c <_printf_common+0x98>

08005058 <_printf_i>:
 8005058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	7e0f      	ldrb	r7, [r1, #24]
 800505e:	4691      	mov	r9, r2
 8005060:	2f78      	cmp	r7, #120	@ 0x78
 8005062:	4680      	mov	r8, r0
 8005064:	460c      	mov	r4, r1
 8005066:	469a      	mov	sl, r3
 8005068:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800506a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800506e:	d807      	bhi.n	8005080 <_printf_i+0x28>
 8005070:	2f62      	cmp	r7, #98	@ 0x62
 8005072:	d80a      	bhi.n	800508a <_printf_i+0x32>
 8005074:	2f00      	cmp	r7, #0
 8005076:	f000 80d3 	beq.w	8005220 <_printf_i+0x1c8>
 800507a:	2f58      	cmp	r7, #88	@ 0x58
 800507c:	f000 80ba 	beq.w	80051f4 <_printf_i+0x19c>
 8005080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005088:	e03a      	b.n	8005100 <_printf_i+0xa8>
 800508a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800508e:	2b15      	cmp	r3, #21
 8005090:	d8f6      	bhi.n	8005080 <_printf_i+0x28>
 8005092:	a101      	add	r1, pc, #4	@ (adr r1, 8005098 <_printf_i+0x40>)
 8005094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005098:	080050f1 	.word	0x080050f1
 800509c:	08005105 	.word	0x08005105
 80050a0:	08005081 	.word	0x08005081
 80050a4:	08005081 	.word	0x08005081
 80050a8:	08005081 	.word	0x08005081
 80050ac:	08005081 	.word	0x08005081
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005081 	.word	0x08005081
 80050b8:	08005081 	.word	0x08005081
 80050bc:	08005081 	.word	0x08005081
 80050c0:	08005081 	.word	0x08005081
 80050c4:	08005207 	.word	0x08005207
 80050c8:	0800512f 	.word	0x0800512f
 80050cc:	080051c1 	.word	0x080051c1
 80050d0:	08005081 	.word	0x08005081
 80050d4:	08005081 	.word	0x08005081
 80050d8:	08005229 	.word	0x08005229
 80050dc:	08005081 	.word	0x08005081
 80050e0:	0800512f 	.word	0x0800512f
 80050e4:	08005081 	.word	0x08005081
 80050e8:	08005081 	.word	0x08005081
 80050ec:	080051c9 	.word	0x080051c9
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6032      	str	r2, [r6, #0]
 80050f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005100:	2301      	movs	r3, #1
 8005102:	e09e      	b.n	8005242 <_printf_i+0x1ea>
 8005104:	6833      	ldr	r3, [r6, #0]
 8005106:	6820      	ldr	r0, [r4, #0]
 8005108:	1d19      	adds	r1, r3, #4
 800510a:	6031      	str	r1, [r6, #0]
 800510c:	0606      	lsls	r6, r0, #24
 800510e:	d501      	bpl.n	8005114 <_printf_i+0xbc>
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	e003      	b.n	800511c <_printf_i+0xc4>
 8005114:	0645      	lsls	r5, r0, #25
 8005116:	d5fb      	bpl.n	8005110 <_printf_i+0xb8>
 8005118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800511c:	2d00      	cmp	r5, #0
 800511e:	da03      	bge.n	8005128 <_printf_i+0xd0>
 8005120:	232d      	movs	r3, #45	@ 0x2d
 8005122:	426d      	negs	r5, r5
 8005124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005128:	230a      	movs	r3, #10
 800512a:	4859      	ldr	r0, [pc, #356]	@ (8005290 <_printf_i+0x238>)
 800512c:	e011      	b.n	8005152 <_printf_i+0xfa>
 800512e:	6821      	ldr	r1, [r4, #0]
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	0608      	lsls	r0, r1, #24
 8005134:	f853 5b04 	ldr.w	r5, [r3], #4
 8005138:	d402      	bmi.n	8005140 <_printf_i+0xe8>
 800513a:	0649      	lsls	r1, r1, #25
 800513c:	bf48      	it	mi
 800513e:	b2ad      	uxthmi	r5, r5
 8005140:	2f6f      	cmp	r7, #111	@ 0x6f
 8005142:	6033      	str	r3, [r6, #0]
 8005144:	bf14      	ite	ne
 8005146:	230a      	movne	r3, #10
 8005148:	2308      	moveq	r3, #8
 800514a:	4851      	ldr	r0, [pc, #324]	@ (8005290 <_printf_i+0x238>)
 800514c:	2100      	movs	r1, #0
 800514e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005152:	6866      	ldr	r6, [r4, #4]
 8005154:	2e00      	cmp	r6, #0
 8005156:	bfa8      	it	ge
 8005158:	6821      	ldrge	r1, [r4, #0]
 800515a:	60a6      	str	r6, [r4, #8]
 800515c:	bfa4      	itt	ge
 800515e:	f021 0104 	bicge.w	r1, r1, #4
 8005162:	6021      	strge	r1, [r4, #0]
 8005164:	b90d      	cbnz	r5, 800516a <_printf_i+0x112>
 8005166:	2e00      	cmp	r6, #0
 8005168:	d04b      	beq.n	8005202 <_printf_i+0x1aa>
 800516a:	4616      	mov	r6, r2
 800516c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005170:	fb03 5711 	mls	r7, r3, r1, r5
 8005174:	5dc7      	ldrb	r7, [r0, r7]
 8005176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800517a:	462f      	mov	r7, r5
 800517c:	42bb      	cmp	r3, r7
 800517e:	460d      	mov	r5, r1
 8005180:	d9f4      	bls.n	800516c <_printf_i+0x114>
 8005182:	2b08      	cmp	r3, #8
 8005184:	d10b      	bne.n	800519e <_printf_i+0x146>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	07df      	lsls	r7, r3, #31
 800518a:	d508      	bpl.n	800519e <_printf_i+0x146>
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	6861      	ldr	r1, [r4, #4]
 8005190:	4299      	cmp	r1, r3
 8005192:	bfde      	ittt	le
 8005194:	2330      	movle	r3, #48	@ 0x30
 8005196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800519a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800519e:	1b92      	subs	r2, r2, r6
 80051a0:	6122      	str	r2, [r4, #16]
 80051a2:	464b      	mov	r3, r9
 80051a4:	4621      	mov	r1, r4
 80051a6:	4640      	mov	r0, r8
 80051a8:	f8cd a000 	str.w	sl, [sp]
 80051ac:	aa03      	add	r2, sp, #12
 80051ae:	f7ff fee1 	bl	8004f74 <_printf_common>
 80051b2:	3001      	adds	r0, #1
 80051b4:	d14a      	bne.n	800524c <_printf_i+0x1f4>
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ba:	b004      	add	sp, #16
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	f043 0320 	orr.w	r3, r3, #32
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	2778      	movs	r7, #120	@ 0x78
 80051ca:	4832      	ldr	r0, [pc, #200]	@ (8005294 <_printf_i+0x23c>)
 80051cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	6831      	ldr	r1, [r6, #0]
 80051d4:	061f      	lsls	r7, r3, #24
 80051d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80051da:	d402      	bmi.n	80051e2 <_printf_i+0x18a>
 80051dc:	065f      	lsls	r7, r3, #25
 80051de:	bf48      	it	mi
 80051e0:	b2ad      	uxthmi	r5, r5
 80051e2:	6031      	str	r1, [r6, #0]
 80051e4:	07d9      	lsls	r1, r3, #31
 80051e6:	bf44      	itt	mi
 80051e8:	f043 0320 	orrmi.w	r3, r3, #32
 80051ec:	6023      	strmi	r3, [r4, #0]
 80051ee:	b11d      	cbz	r5, 80051f8 <_printf_i+0x1a0>
 80051f0:	2310      	movs	r3, #16
 80051f2:	e7ab      	b.n	800514c <_printf_i+0xf4>
 80051f4:	4826      	ldr	r0, [pc, #152]	@ (8005290 <_printf_i+0x238>)
 80051f6:	e7e9      	b.n	80051cc <_printf_i+0x174>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f023 0320 	bic.w	r3, r3, #32
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	e7f6      	b.n	80051f0 <_printf_i+0x198>
 8005202:	4616      	mov	r6, r2
 8005204:	e7bd      	b.n	8005182 <_printf_i+0x12a>
 8005206:	6833      	ldr	r3, [r6, #0]
 8005208:	6825      	ldr	r5, [r4, #0]
 800520a:	1d18      	adds	r0, r3, #4
 800520c:	6961      	ldr	r1, [r4, #20]
 800520e:	6030      	str	r0, [r6, #0]
 8005210:	062e      	lsls	r6, r5, #24
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	d501      	bpl.n	800521a <_printf_i+0x1c2>
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	e002      	b.n	8005220 <_printf_i+0x1c8>
 800521a:	0668      	lsls	r0, r5, #25
 800521c:	d5fb      	bpl.n	8005216 <_printf_i+0x1be>
 800521e:	8019      	strh	r1, [r3, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	4616      	mov	r6, r2
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	e7bc      	b.n	80051a2 <_printf_i+0x14a>
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	2100      	movs	r1, #0
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	6032      	str	r2, [r6, #0]
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f859 	bl	80052ec <memchr>
 800523a:	b108      	cbz	r0, 8005240 <_printf_i+0x1e8>
 800523c:	1b80      	subs	r0, r0, r6
 800523e:	6060      	str	r0, [r4, #4]
 8005240:	6863      	ldr	r3, [r4, #4]
 8005242:	6123      	str	r3, [r4, #16]
 8005244:	2300      	movs	r3, #0
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800524a:	e7aa      	b.n	80051a2 <_printf_i+0x14a>
 800524c:	4632      	mov	r2, r6
 800524e:	4649      	mov	r1, r9
 8005250:	4640      	mov	r0, r8
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	47d0      	blx	sl
 8005256:	3001      	adds	r0, #1
 8005258:	d0ad      	beq.n	80051b6 <_printf_i+0x15e>
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	079b      	lsls	r3, r3, #30
 800525e:	d413      	bmi.n	8005288 <_printf_i+0x230>
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	4298      	cmp	r0, r3
 8005266:	bfb8      	it	lt
 8005268:	4618      	movlt	r0, r3
 800526a:	e7a6      	b.n	80051ba <_printf_i+0x162>
 800526c:	2301      	movs	r3, #1
 800526e:	4632      	mov	r2, r6
 8005270:	4649      	mov	r1, r9
 8005272:	4640      	mov	r0, r8
 8005274:	47d0      	blx	sl
 8005276:	3001      	adds	r0, #1
 8005278:	d09d      	beq.n	80051b6 <_printf_i+0x15e>
 800527a:	3501      	adds	r5, #1
 800527c:	68e3      	ldr	r3, [r4, #12]
 800527e:	9903      	ldr	r1, [sp, #12]
 8005280:	1a5b      	subs	r3, r3, r1
 8005282:	42ab      	cmp	r3, r5
 8005284:	dcf2      	bgt.n	800526c <_printf_i+0x214>
 8005286:	e7eb      	b.n	8005260 <_printf_i+0x208>
 8005288:	2500      	movs	r5, #0
 800528a:	f104 0619 	add.w	r6, r4, #25
 800528e:	e7f5      	b.n	800527c <_printf_i+0x224>
 8005290:	08005417 	.word	0x08005417
 8005294:	08005428 	.word	0x08005428

08005298 <memmove>:
 8005298:	4288      	cmp	r0, r1
 800529a:	b510      	push	{r4, lr}
 800529c:	eb01 0402 	add.w	r4, r1, r2
 80052a0:	d902      	bls.n	80052a8 <memmove+0x10>
 80052a2:	4284      	cmp	r4, r0
 80052a4:	4623      	mov	r3, r4
 80052a6:	d807      	bhi.n	80052b8 <memmove+0x20>
 80052a8:	1e43      	subs	r3, r0, #1
 80052aa:	42a1      	cmp	r1, r4
 80052ac:	d008      	beq.n	80052c0 <memmove+0x28>
 80052ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052b6:	e7f8      	b.n	80052aa <memmove+0x12>
 80052b8:	4601      	mov	r1, r0
 80052ba:	4402      	add	r2, r0
 80052bc:	428a      	cmp	r2, r1
 80052be:	d100      	bne.n	80052c2 <memmove+0x2a>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ca:	e7f7      	b.n	80052bc <memmove+0x24>

080052cc <_sbrk_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	2300      	movs	r3, #0
 80052d0:	4d05      	ldr	r5, [pc, #20]	@ (80052e8 <_sbrk_r+0x1c>)
 80052d2:	4604      	mov	r4, r0
 80052d4:	4608      	mov	r0, r1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	f7fb fda2 	bl	8000e20 <_sbrk>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_sbrk_r+0x1a>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_sbrk_r+0x1a>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	20000424 	.word	0x20000424

080052ec <memchr>:
 80052ec:	4603      	mov	r3, r0
 80052ee:	b510      	push	{r4, lr}
 80052f0:	b2c9      	uxtb	r1, r1
 80052f2:	4402      	add	r2, r0
 80052f4:	4293      	cmp	r3, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	d101      	bne.n	80052fe <memchr+0x12>
 80052fa:	2000      	movs	r0, #0
 80052fc:	e003      	b.n	8005306 <memchr+0x1a>
 80052fe:	7804      	ldrb	r4, [r0, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	428c      	cmp	r4, r1
 8005304:	d1f6      	bne.n	80052f4 <memchr+0x8>
 8005306:	bd10      	pop	{r4, pc}

08005308 <memcpy>:
 8005308:	440a      	add	r2, r1
 800530a:	4291      	cmp	r1, r2
 800530c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005310:	d100      	bne.n	8005314 <memcpy+0xc>
 8005312:	4770      	bx	lr
 8005314:	b510      	push	{r4, lr}
 8005316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800531a:	4291      	cmp	r1, r2
 800531c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005320:	d1f9      	bne.n	8005316 <memcpy+0xe>
 8005322:	bd10      	pop	{r4, pc}

08005324 <_realloc_r>:
 8005324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005328:	4680      	mov	r8, r0
 800532a:	4615      	mov	r5, r2
 800532c:	460c      	mov	r4, r1
 800532e:	b921      	cbnz	r1, 800533a <_realloc_r+0x16>
 8005330:	4611      	mov	r1, r2
 8005332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005336:	f7ff bc39 	b.w	8004bac <_malloc_r>
 800533a:	b92a      	cbnz	r2, 8005348 <_realloc_r+0x24>
 800533c:	f7ff fbcc 	bl	8004ad8 <_free_r>
 8005340:	2400      	movs	r4, #0
 8005342:	4620      	mov	r0, r4
 8005344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005348:	f000 f81a 	bl	8005380 <_malloc_usable_size_r>
 800534c:	4285      	cmp	r5, r0
 800534e:	4606      	mov	r6, r0
 8005350:	d802      	bhi.n	8005358 <_realloc_r+0x34>
 8005352:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005356:	d8f4      	bhi.n	8005342 <_realloc_r+0x1e>
 8005358:	4629      	mov	r1, r5
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fc26 	bl	8004bac <_malloc_r>
 8005360:	4607      	mov	r7, r0
 8005362:	2800      	cmp	r0, #0
 8005364:	d0ec      	beq.n	8005340 <_realloc_r+0x1c>
 8005366:	42b5      	cmp	r5, r6
 8005368:	462a      	mov	r2, r5
 800536a:	4621      	mov	r1, r4
 800536c:	bf28      	it	cs
 800536e:	4632      	movcs	r2, r6
 8005370:	f7ff ffca 	bl	8005308 <memcpy>
 8005374:	4621      	mov	r1, r4
 8005376:	4640      	mov	r0, r8
 8005378:	f7ff fbae 	bl	8004ad8 <_free_r>
 800537c:	463c      	mov	r4, r7
 800537e:	e7e0      	b.n	8005342 <_realloc_r+0x1e>

08005380 <_malloc_usable_size_r>:
 8005380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005384:	1f18      	subs	r0, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	bfbc      	itt	lt
 800538a:	580b      	ldrlt	r3, [r1, r0]
 800538c:	18c0      	addlt	r0, r0, r3
 800538e:	4770      	bx	lr

08005390 <_init>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr

0800539c <_fini>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr
